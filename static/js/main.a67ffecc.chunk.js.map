{"version":3,"sources":["AppStyles.js","pages/HomeStyles.js","components/MessageBox/Styles.js","components/MessageBox/index.js","pages/Home.js","pages/HooksStyles.js","hooks/useFadeIn.js","hooks/useFullScreen.js","pages/Hooks.js","hooks/useInput.js","hooks/useAxios.js","hooks/useBeforeLeave.js","hooks/useClick.js","hooks/useConfirm.js","hooks/useNetwork.js","hooks/useNotification.js","hooks/usePreventLeave.js","hooks/useScroll.js","hooks/useTabs.js","hooks/useTitle.js","pages/AntdStyles.js","pages/Antd.js","pages/ClassComponentStyles.js","components/game/GuGuDanClass.js","components/game/WordRelayClass.js","components/piece/BaseballClass_Try.js","components/game/BaseballClass.js","components/game/LifeCycleClass.js","components/piece/PropsClass.js","components/game/PropsTransmissionClass.js","components/game/ReactionRateStyles.js","components/game/ReactionRateClass.js","components/game/RSPStyles.js","components/game/RSPClass.js","components/game/LottoStyles.js","components/piece/BallClass.js","components/game/LottoClass.js","pages/ClassComponent.js","pages/FunctionComponentStyles.js","components/game/GuGuDanFunc.js","components/game/WordRelayFunc.js","components/piece/BaseballFunc_Try.js","components/game/BaseballFunc.js","components/game/LifeCycleFunc.js","components/piece/PropsFunc.js","components/game/PropsTransmissionFunc.js","components/game/ReactionRateFunc.js","components/game/RSPFunc.js","components/piece/BallFunc.js","components/game/LottoFunc.js","components/game/TicTacToeStyles.js","components/piece/TicTacToeTd.js","components/piece/TicTacToeTr.js","components/piece/TicTacToeTable.js","components/game/TicTacToeFunc.js","components/game/MineSearchStyles.js","components/piece/MineSearchTd.js","components/piece/MineSearchTr.js","components/piece/MineSearchTable.js","components/piece/MineSearchForm.js","components/game/MineSearchFunc.js","pages/FunctionComponent.js","pages/NavigationStyles.js","pages/Navigation.js","App.js","reportWebVitals.js","index.js"],"names":["Styles","styled","div","MessageBoxStyle","MessageBox","props","children","Home","useState","micOnOff","setMicOnOff","micState","setMicState","className","icon","AudioOutlined","AudioMutedOutlined","onClick","description","useFadeIn","duration","delay","element","useRef","useEffect","current","console","log","style","opacity","transition","ref","useFullScreen","toggleFullScreen","target","document","fullscreenElement","webkitFullscreenElement","mozFullscreenElement","msFullscreenElement","exitFullscreen","mozExitFullscreen","webkitExitFullscreen","msExitFullscreen","requestFullscreen","mozRequestFullscreen","webkitRequestFullscreen","msRequestFullscreen","Hooks","regExOnlyEng","name","initialValue","validator","value","setValue","onChange","event","willUpdate","useInput","test","substr","opts","azxiosInstance","defaultAxios","loading","error","data","state","setState","trigger","setTrigger","refetch","loding","Date","now","then","catch","url","useAxios","JSON","stringify","onBefore","handle","clientY","addEventListener","removeEventListener","useBeforeLeave","title","useClick","ConfirmDelete","massage","onConfirm","onCancel","window","confirm","useConfirm","fadeInH1","fadeInP","onLine","navigator","status","setStatus","handelChange","useNetwork","triggerNotif","options","Notification","permission","requestPermission","useNotification","body","listener","preventDefault","returnValue","enablePrevent","disablePrevent","usePreventLeave","y","x","onScroll","scrollX","scrollY","useScroll","content","tab","initialTab","allContents","currentIndex","setCurrentIndexFn","currentItem","changeItem","useTabs","inintialTitle","setTitle","querySelector","innerText","useTitle","placeholder","position","id","src","width","right","bottom","top","color","map","section","index","Antd","type","GuGuDanClass","onSubmit","e","parseInt","first","second","prevState","Math","ceil","random","result","input","focus","onRefInput","this","React","Component","WordRelayClass","inputRef","createRef","word","length","Baseball_Try","tryInfo","try","resualt","PureComponent","getNumbers","candidate","array","i","chosen","splice","floor","push","join","BaseballClass","onSubmitForm","answer","tries","answerArray","split","strike","ball","alert","includes","onChangeInput","LifeCycleClass","counter","onClick1","onClick2","nextProps","nextState","PropsClass","text","toString","PropsTransmissionClass","ReactionRateClass","onClickScreen","msg","timeout","setTimeout","startTime","clearTimeout","endTime","onReset","renderAverage","reduce","a","c","repCoords","바위","가위","보","scores","computerChoice","imgCoord","Object","entries","find","v","RSPClass","score","start","interval","setInterval","changeHand","onClickBtn","choice","clearInterval","myScore","diff","background","Ball","number","getWinNumbers","Array","fill","shuffle","bonusNumber","winNumbers","slice","sort","b","LottoClass","winBalls","bonus","redo","timeouts","runTimeouts","onClickRedo","prevProps","forEach","ClassComponent","GuGuDanFunc","setFirst","setSecond","setResult","prevResult","setWord","memo","count","BaseballFunc","setResualt","setAnswer","setTries","LifeCycleFunc","setCounter","PropsFunc","setText","PropsTransmissionFunc","setMsg","RSPFunc","setImgCoord","setScore","prevScore","LottoFunc","lottoNumbers","useMemo","setWinNumbers","setWinBalls","setBonus","setRedo","prevBalls","useCallback","Td","rowIndex","cellIndex","dispatch","cellData","onClickTd","CLICK_CELL","row","cell","Tr","rowData","td","Table","tableData","tr","initalState","winner","turn","recentCell","SET_WINNER","CHANGE_TURN","RESET_GAME","reducer","action","TicTacToeFunc","useReducer","win","all","getTdStyle","code","CODE","NORMAL","MINE","CLICKED_MINE","OPENED","QUESTION_MINE","QUESTION","FLAG_MINE","FLAG","getTdText","useContext","TableContext","halted","OPEN_CELL","CLICK_MINE","onRightClickTd","FLAG_CELL","QUESTION_CELL","NORMALIZE_CELL","RealTd","onContextMenu","Form","setRow","setCell","mine","setMine","onChangeRow","onChangeCell","onChangeMine","START_GAME","createContext","initialState","timer","openedCount","INCREMENT_TIMER","plantMine","arr","j","k","ver","hor","checked","checkAround","around","concat","filter","near","n","MineSearchFunc","Provider","FunctionComponent","WordRelayFunc","ReactionRateFunc","Navigation","to","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a67ffecc.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  padding: 20px;\r\n\r\n  & h1 {\r\n    color: #0a74f9;\r\n  }\r\n  & .item {\r\n    margin-bottom: 20px;\r\n    & .tit {\r\n      margin-bottom: 5px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Styles;","import styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  & .item {\r\n    margin-bottom: 20px;\r\n    & .tit {\r\n      margin-bottom: 5px;\r\n    }\r\n  }\r\n  & .btn {\r\n    border: 1px solid #333;\r\n    border-radius: 3px;\r\n    padding: 0 10px;\r\n    background: #fff;\r\n    &.active {\r\n      background: #333;\r\n      color: #fff;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Styles;","import styled from \"styled-components\";\r\n\r\nconst MessageBoxStyle = styled.div`\r\n\r\n\r\n  max-width: 800px;\r\n  padding: 40px 2.5%;\r\n  min-height: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  background: #fff;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.11);\r\n  border-radius: 15px;\r\n  text-align: center;\r\n  margin-bottom: 40px;\r\n`;\r\n\r\nexport default MessageBoxStyle;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MessageBoxStyel from './Styles';\r\n\r\nfunction MessageBox(props) {\r\n  const { children } = props;\r\n\r\n  return <MessageBoxStyel {...props}>{children}</MessageBoxStyel>;\r\n}\r\n\r\nMessageBox.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default MessageBox;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Empty } from \"antd\";\r\nimport { AudioOutlined, AudioMutedOutlined } from \"@ant-design/icons\";\r\nimport Styles from \"./HomeStyles\";\r\nimport MessageBox from \"../components/MessageBox\";\r\n\r\nfunction Home() {\r\n  const [micOnOff, setMicOnOff] = useState(true);\r\n  const handleMicToggle1 = () => {\r\n    setMicOnOff(!micOnOff);\r\n  };\r\n\r\n  const [micState, setMicState] = useState(true);\r\n  const handleMicToggle2 = () => {\r\n    setMicState(!micState);\r\n  };\r\n\r\n  return (\r\n    <Styles>\r\n      adsfsdfas\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">버튼 아이콘 토글</h1>\r\n        <Button\r\n          className=\"lnb-btn\"\r\n          icon={micOnOff ? <AudioOutlined /> : <AudioMutedOutlined />}\r\n          onClick={handleMicToggle1}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">버튼 클래스 토글</h1>\r\n        <button\r\n          onClick={handleMicToggle2}\r\n          className={`btn${micState ? \"\" : \" active\"}`}\r\n        >\r\n          클래스 토글\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">Wrapper Node(MessageBox)</h1>\r\n        <MessageBox>\r\n          <Empty description=\"초대받은 회의 정보가 없습니다.\" />\r\n        </MessageBox>\r\n      </div>\r\n    </Styles>\r\n  );\r\n}\r\nexport default Home;\r\n","import styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  \r\n  & .btn {\r\n    border: 1px solid #333;\r\n    border-radius: 3px;\r\n    padding: 0 10px;\r\n    background: #fff;\r\n    &.active {\r\n      background: #333;\r\n      color: #fff;\r\n    }\r\n  }\r\n\r\n  #elem-fullscreen:not(:fullscreen) button {\r\n    background: red;\r\n  }\r\n\r\n  #elem-fullscreen:fullscreen button {\r\n    background: blue;\r\n  }\r\n`;\r\n\r\nexport default Styles;\r\n","/*useFadeIn.js*/\r\nimport { useRef, useEffect } from \"react\";\r\n\r\nexport const useFadeIn = (duration = 1, delay = 0) => {\r\n  const element = useRef();\r\n\r\n  useEffect(() => {\r\n    if (element.current) {\r\n      console.log(\"useFadeIn start\", element.current.style.opacity);\r\n      //alert();\r\n      const { current } = element;\r\n      current.style.transition = `opacity ${duration}s ease-in-out ${delay}s`;\r\n      current.style.opacity = 1;\r\n    }\r\n  }, []);\r\n  return { ref: element, style: { opacity: 0 } };\r\n};\r\n","/*useFullScreen.js*/\r\nimport { useRef } from \"react\";\r\n\r\n// 버튼을 누르면 사진 영역이 토글, f11을 누르면 document 토글\r\n// 정상작동\r\nexport const useFullScreen = () => {\r\n  const element = useRef();\r\n\r\n  const getFullscreenElement = () => {\r\n    return (\r\n      document.fullscreenElement ||\r\n      document.webkitFullscreenElement ||\r\n      document.mozFullscreenElement ||\r\n      document.msFullscreenElement\r\n    );\r\n  };\r\n\r\n  const toggleFullScreen = ({ target }) => {\r\n    //const clickElem = target;\r\n\r\n    if (getFullscreenElement()) {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n      } else if (document.mozExitFullscreen) {\r\n        document.mozExitFullscreen();\r\n      } else if (document.webkitExitFullscreen) {\r\n        document.webkitExitFullscreen();\r\n      } else if (document.msExitFullscreen) {\r\n        document.msExitFullscreen();\r\n      }\r\n      // clickElem.classList.remove(\"active\");\r\n    } else {\r\n      //document.documentElement.requestFullscreen().catch(console.log);  //전체화면\r\n      if (element.current) {\r\n        if (element.current.requestFullscreen) {\r\n          element.current.requestFullscreen(); //특정영역\r\n        } else if (element.current.mozRequestFullscreen) {\r\n          element.current.mozRequestFullscreen();\r\n        } else if (element.current.webkitRequestFullscreen) {\r\n          element.current.webkitRequestFullscreen();\r\n        } else if (element.current.msRequestFullscreen) {\r\n          element.current.msRequestFullscreen();\r\n        }\r\n      }\r\n      //clickElem.classList.add(\"active\");\r\n    }\r\n  };\r\n\r\n  return { element, toggleFullScreen };\r\n};","import React from \"react\";\r\nimport { Button, Space } from \"antd\";\r\nimport Styles from \"./HooksStyles\";\r\nimport { useInput } from \"../hooks/useInput\";\r\nimport { useAxios } from \"../hooks/useAxios\";\r\nimport { useBeforeLeave } from \"../hooks/useBeforeLeave\";\r\nimport { useClick } from \"../hooks/useClick\";\r\nimport { useConfirm } from \"../hooks/useConfirm\";\r\nimport { useFadeIn } from \"../hooks/useFadeIn\";\r\nimport { useFullScreen } from \"../hooks/useFullScreen\";\r\nimport { useNetwork } from \"../hooks/useNetwork\";\r\nimport { useNotification } from \"../hooks/useNotification\";\r\nimport { usePreventLeave } from \"../hooks/usePreventLeave\";\r\nimport { useScroll } from \"../hooks/useScroll\";\r\nimport { useTabs } from \"../hooks/useTabs\";\r\nimport { useTitle } from \"../hooks/useTitle\";\r\n\r\nfunction Hooks() {\r\n  // const maxLen = value => value.length <= 10;\r\n  //const maxLen = value => !value.includes(\"@\");\r\n  const regExOnlyEng = /^[a-zA-Z]*$/;\r\n  const maxLen = (value) => regExOnlyEng.test(value.substr(-1, 1)); // substr 마지막 자리 1개를 잘라온다. 영어만 입력 가능. (중간에 한글이 들어감;;;;)\r\n  // const maxLen = (value) => value.includes(regExOnlyEng);\r\n  const name = useInput(\"Mr.\", maxLen); //name = {value: \"Mr/\"} . name에 객체가 담김.\r\n\r\n  //useAxios\r\n  const { loading, data, error, refetch } = useAxios({\r\n    url: \"https://api.androidhive.info/contacts/\",\r\n  });\r\n  console.log(\r\n    `Loding: ${loading},\\nerror: ${error},\\ndata: ${JSON.stringify(data)}`\r\n  );\r\n\r\n  // useBeforeLeave\r\n  const beforeLife = () => {\r\n    console.log(\"Don't leave\");\r\n  };\r\n  useBeforeLeave(beforeLife);\r\n\r\n  // useClick\r\n  const sayHello = () => console.log(\"hello\");\r\n  const title = useClick(sayHello);\r\n\r\n  //useConfirm\r\n  const deleteWorld = () => console.log(\"Delete the world!\");\r\n  const abort = () => console.log(\"Aborted!\");\r\n  const ConfirmDelete = useConfirm(\"are you sure\", deleteWorld, abort);\r\n\r\n  // useFadeIn\r\n  const fadeInH1 = useFadeIn(5);\r\n  const fadeInP = useFadeIn(4, 3);\r\n\r\n  // useFullScreen\r\n  const { element, toggleFullScreen } = useFullScreen();\r\n\r\n  // useNetwork\r\n  const handleNetworkChange = (onLine) => {\r\n    console.log(onLine ? \"Online\" : \"Offline\");\r\n  };\r\n  const onLine = useNetwork(handleNetworkChange);\r\n\r\n  // useNotification\r\n  const triggerNotif = useNotification(\"can I steal your kimchi?\", {\r\n    body: \"I love kimchi\",\r\n  });\r\n\r\n  // usePreventLeave\r\n  const { enablePrevent, disablePrevent } = usePreventLeave();\r\n\r\n  // useScroll\r\n  const { y } = useScroll();\r\n\r\n  // useTab\r\n  const content = [\r\n    {\r\n      tab: \"section 1\",\r\n      content: \"I'm the content of the Section 1\",\r\n    },\r\n    {\r\n      tab: \"section 2\",\r\n      content: \"I'm the content of the Section 2\",\r\n    },\r\n  ];\r\n\r\n  const { currentItem, changeItem } = useTabs(0, content);\r\n\r\n  // useTitle\r\n  const titleUpdater = useTitle(\"Hook Loding....\");\r\n\r\n  return (\r\n    <Styles>\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">1. useInput</h1>\r\n        <input\r\n          placeholder=\"Name\"\r\n          value={name.value}\r\n          onChange={name.onChange}\r\n        ></input>\r\n        <br />\r\n        {/* <input placeholder=\"Name\" {...name}></input> */}\r\n        {/* {...}을 쓰면 name안에 들어있는 값을 그대로 풀어서 입력 한다. */}\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">2. useAxios</h1>\r\n        <h2>{data && data.status}</h2>\r\n        <h3>{loading && \"Loding2\"}</h3>\r\n        <Button onClick={refetch}>refetch</Button>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">3. useBeforLeave</h1>\r\n        <p>\r\n          마우스 포인터가 페이지를 벗어나 브라우저 상단 탭 쪽으로 이동하면 발생\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">4. useClick</h1>\r\n        <Button ref={title}>useClick</Button>\r\n        <p>엘리먼트에 동적으로 이벤트를 추가하고 clen-up 한다.</p>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">5. useConfirm</h1>\r\n        <Button onClick={ConfirmDelete}>Delete the world</Button>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">6. useFadeIn</h1>\r\n        <h1 {...fadeInH1}>hi</h1>\r\n        <p {...fadeInP}>일이삼사오육칠팔</p>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">7. useFullScreen</h1>\r\n        <div\r\n          style={{ position: \"relative\" }}\r\n          ref={element}\r\n          id=\"elem-fullscreen\"\r\n        >\r\n          <img\r\n            src=\"https://cdn2.wanderlust.co.uk/media/1028/cropped-shutterstock_497799013.jpg?anchor=center&mode=crop&width=1440&height=540&format=auto&quality=80&rnd=131915974290000000\"\r\n            style={{ width: \"100%\" }}\r\n          />\r\n          <button\r\n            style={{ position: \"absolute\", right: \"20px\", bottom: \"20px\" }}\r\n            id=\"fs-toggle\"\r\n            onClick={toggleFullScreen}\r\n          >\r\n            확대\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">8. useNetwork</h1>\r\n        <p>{onLine ? \"Online\" : \"Offline\"}</p>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">9. useNotification</h1>\r\n        <Button onClick={triggerNotif}>Notification</Button>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">10. usePreventLeave</h1>\r\n        <p>페이지를 닫거나 새로고침 할때 종료하겠냐는 컨펌창이 뜸</p>\r\n        <Space>\r\n          <Button onClick={enablePrevent}>Protect</Button>\r\n          <Button onClick={disablePrevent}>Unrotect</Button>\r\n        </Space>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">11. useScroll</h1>\r\n        <h1\r\n          style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            right: 20,\r\n            color: y > 200 ? \"red\" : \"blue\",\r\n          }}\r\n        >\r\n          Section1\r\n        </h1>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">12. useTab</h1>\r\n        <Space>\r\n          {content.map((section, index) => (\r\n            <Button\r\n              onClick={function () {\r\n                changeItem(index);\r\n              }}\r\n            >\r\n              {section.tab}\r\n            </Button> //section은 content 배열의 각 아이템을 변수로 받은 것\r\n          ))}\r\n        </Space>\r\n        <div>{currentItem.content}</div>\r\n      </div>\r\n\r\n      <div className=\"item\">\r\n        <h1 className=\"tit\">13. useTitle</h1>\r\n      </div>\r\n    </Styles>\r\n  );\r\n}\r\nexport default Hooks;\r\n","\r\n/*useInput.js*/\r\nimport { useState } from \"react\";\r\n\r\nexport const useInput = (initialValue, validator) => {\r\n  const [value, setValue] = useState(initialValue); //value = \"Mr.\", setValue = ƒ ()\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    let willUpdate = true;\r\n    if (typeof validator === \"function\") {\r\n      willUpdate = validator(value);\r\n      console.log(willUpdate, value); //true 또는 false를 반환\r\n    }\r\n    if (willUpdate) {\r\n      setValue(value);\r\n    }\r\n  };\r\n  return { value, onChange }; //return 시 value 만 넘기면 string이 name = \"Mr/\"} , {} 로 감싸면 객체가 넘어감.\r\n};","/*useAxios.js*/\r\nimport defaultAxios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport const useAxios = (opts, azxiosInstance = defaultAxios) => {\r\n  const [state, setState] = useState({\r\n    loading: true,\r\n    error: null,\r\n    data: null,\r\n  });\r\n\r\n  const [trigger, setTrigger] = useState(0);\r\n  const refetch = () => {\r\n    setState({\r\n      ...state,\r\n      loding: true,\r\n    });\r\n    setTrigger(Date.now());\r\n  };\r\n  useEffect(() => {\r\n    azxiosInstance(opts)\r\n      .then((data) => {\r\n        setState({\r\n          ...state,\r\n          loding: false,\r\n          data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setState({ ...state, loding: false, error });\r\n      });\r\n  }, [trigger]);\r\n\r\n  if (!opts.url) {\r\n    return;\r\n  }\r\n\r\n  return { ...state, refetch };\r\n};\r\n","import { useEffect } from \"react\";\r\n\r\n//마우스 포인터가 페이지를 벗어나 브라우저 상단 탭 쪽으로 이동하면 발생\r\n\r\nexport const useBeforeLeave = (onBefore) => {\r\n  // if (typeof onBefore !== \"function\") {\r\n  //   return;\r\n  // }\r\n  const handle = (event) => {\r\n    //console.log(\"leaving\");\r\n    const { clientY } = event;\r\n    //마우스 포인터가 위로 벗어났을 때만 실행\r\n    if (clientY <= 0) {\r\n      onBefore();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"mouseleave\", handle);\r\n    return () => {\r\n      document.removeEventListener(\"mouseleave\", handle);\r\n    };\r\n  }, []);\r\n};","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useClick = (onClick) => {\r\n  // if (typeof onClick !== \"function\") {\r\n  //   return;\r\n  // }\r\n  const element = useRef();\r\n  useEffect(() => {\r\n    if (element.current) {\r\n      // console.log(element.current);\r\n      element.current.addEventListener(\"click\", onClick);\r\n    }\r\n    //clean up\r\n    return () => {\r\n      if (element.current) {\r\n        element.current.removeEventListener(\"click\", onClick);\r\n      }\r\n      console.log(\"unmount\");\r\n    };\r\n  }, []); //빈 배열을 넣어주므로써  update 될때마다 실행되지 않고, 초기 1회만 실행 된다.\r\n  return element;\r\n};","\r\nexport const useConfirm = (massage = \"\", onConfirm, onCancel) => {\r\n    if (!onConfirm || typeof onConfirm !== \"function\") {\r\n      return;\r\n    }\r\n    if (!onCancel || typeof onCancel !== \"function\") {\r\n      return;\r\n    }\r\n    const confirmAction = () => {\r\n      if (window.confirm(massage)) {\r\n        onConfirm();\r\n      } else {\r\n        onCancel();\r\n      }\r\n    };\r\n  \r\n    return confirmAction;\r\n  };","/*useNetwork*/\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport const useNetwork = (onChange) => {\r\n  const [status, setStatus] = useState(navigator.onLine);\r\n  const handelChange = () => {\r\n    if (typeof onChange === \"function\") {\r\n      onChange(navigator.onLine);\r\n    }\r\n    setStatus(navigator.onLine);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"online\", handelChange);\r\n    window.addEventListener(\"offline\", handelChange);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"online\", handelChange);\r\n      window.removeEventListener(\"offline\", handelChange);\r\n    };\r\n  }, []);\r\n\r\n  return status;\r\n};","/*useNotification*/\r\n\r\n// hook은 아님, window의 API\r\n// 권한요청 후 알림\r\nexport const useNotification = (title, options) => {\r\n    console.log(\"useNotification\");\r\n    if (!(\"Notification\" in window)) {\r\n      return;\r\n    }\r\n    const fireNotif = () => {\r\n      if (Notification.permission !== \"granted\") {\r\n        Notification.requestPermission().then((permission) => {\r\n          if (permission === \"granted\") {\r\n            new Notification(title, options);\r\n          } else {\r\n            return;\r\n          }\r\n        });\r\n      } else {\r\n        new Notification(title, options);\r\n      }\r\n    };\r\n    return fireNotif;\r\n  };\r\n  \r\n  //https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification\r\n  //permisstion 종류\r\n  // denied - 거부\r\n  // granted - 허가\r\n  // default - 거부로 인식","/*usePreventLeave.js*/\r\n\r\n\r\n//페이지를 닫거나 새로고침 할때 종료하겠냐는 컨펌창이 뜸\r\nexport const usePreventLeave = () => {\r\n    const listener = (event) => {\r\n      event.preventDefault();\r\n      event.returnValue = \"\";\r\n    };\r\n    const enablePrevent = () => {\r\n      window.addEventListener(\"beforeunload\", listener);\r\n    };\r\n    const disablePrevent = () => {\r\n      window.removeEventListener(\"beforeunload\", listener);\r\n    };\r\n  \r\n    return { enablePrevent, disablePrevent };\r\n  };","/*useScroll*/\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport const useScroll = () => {\r\n  const [state, setState] = useState({ x: 0, y: 0 });\r\n  const onScroll = () => {\r\n    //console.log(\"y : \" + window.scrollY, \" x :\" + window.scrollX);\r\n    setState({ x: window.scrollX, y: window.scrollY });\r\n  };\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, []);\r\n  return state;\r\n};\r\n","\r\n/*useTabs*/\r\nimport { useState } from \"react\";\r\n\r\nexport const useTabs = function (initialTab, allContents) {\r\n  // if(!allContents || !Array.isArray(allContents)) {\r\n  //   return;\r\n  // }\r\n  const [currentIndex, setCurrentIndexFn] = useState(initialTab); //currentIndex에는 배열이 담긴다.\r\n  return {\r\n    //객체을 리턴\r\n    currentItem: allContents[currentIndex],\r\n    changeItem: setCurrentIndexFn,\r\n  };\r\n};","/*useTitle*/\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport const useTitle = (inintialTitle) => {\r\n  const [title, setTitle] = useState(inintialTitle);\r\n  const updateTitle = () => {\r\n    const htmlTitle = document.querySelector(\"title\");\r\n    htmlTitle.innerText = title;\r\n  };\r\n\r\n  useEffect(updateTitle, [title]);\r\n\r\n  return setTitle; //return을 안해도 타이틀 바뀜. 호출하기 위해서는 retruen 을 해주어야 함.\r\n};\r\n","/*AntdStyles.js*/\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  Button {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport default Styles;","/*Antd.js*/\r\n\r\n\r\nimport React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport Styles from \"./AntdStyles\";\r\n\r\nfunction Antd() {\r\n  return (\r\n    <Styles>\r\n      <h1>Ant Design</h1>\r\n      <div>\r\n        <h2>Buttons</h2>\r\n        <Button type=\"primary\">Primary Button</Button>\r\n        <Button>Default Button</Button>\r\n        <Button type=\"dashed\">Dashed Button</Button>\r\n        <br />\r\n        <Button type=\"text\">Text Button</Button>\r\n        <Button type=\"link\">Link Button</Button>\r\n      </div>\r\n    </Styles>\r\n  );\r\n}\r\nexport default Antd;","import styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  Button {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport default Styles;","import React from \"react\";\r\nimport { Space } from \"antd\";\r\n// import Styles from \"./ClassComponentStyles\";\r\n\r\n\r\n\r\nclass GuGuDanClass extends React.Component {\r\n  constructor(props) {\r\n\r\n    super(props);\r\n    this.state = {\r\n        first: Math.ceil(Math.random() * 9),\r\n        second: Math.ceil(Math.random() * 9),\r\n        value: '',\r\n        result: '',\r\n    };\r\n}\r\n\r\n\r\n  onSubmit = (e) => {\r\n      e.preventDefault();\r\n      if (parseInt(this.state.value) === this.state.first * this.state.second) {\r\n          // this.setState({\r\n          //     first: Math.ceil(Math.random() * 9),\r\n          //     second: Math.ceil(Math.random() * 9),\r\n          //     value: '',\r\n          //     result: '정답',\r\n          // })\r\n\r\n          this.setState((prevState) => {\r\n              return {\r\n\r\n                  first: Math.ceil(Math.random() * 9),\r\n                  second: Math.ceil(Math.random() * 9),\r\n                  value: '',\r\n                  result: `정답: ${prevState.first} 곱하기 ${prevState.second} = ${prevState.value}`,\r\n              }\r\n          })\r\n\r\n      } else {\r\n          this.setState({\r\n              value: '',\r\n              result: '떙',\r\n          })\r\n      }\r\n      this.input.focus();\r\n  }\r\n\r\n  onChange = (e) => {\r\n      this.setState({ value: e.target.value })\r\n  }\r\n\r\n  //변수 선언. const input으로 선언하면 에러가 남.\r\n  input; \r\n\r\n  onRefInput = (e) => { this.input = e }\r\n\r\n  render() {\r\n      return (\r\n          <div>\r\n            <h1>구구단 : setState를 이용해 이전 State 값 얻기, Ref를 이용한 참조</h1>\r\n              <div>{this.state.first}곱하기{this.state.second}은?</div>\r\n              <form onSubmit={this.onSubmit}>\r\n                  <Space>\r\n                    <input type=\"number\" ref={this.onRefInput} name=\"num\" value={this.state.value} onChange={this.onChange} />\r\n                    <button className=\"ant-btn\">입력</button>\r\n                  </Space>\r\n              </form>\r\n              <div>{this.state.result}</div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default GuGuDanClass;\r\n","/* WordRelayClass */\r\nimport React, { createRef } from \"react\";\r\nimport { Space } from \"antd\";\r\n\r\n\r\nclass WordRelayClass extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      word: \"박은희\",\r\n      value: \"\",\r\n      result: \"\"\r\n    };\r\n  }\r\n\r\n  inputRef = createRef();\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.word[this.state.word.length - 1] === this.state.value[0]) {\r\n      this.setState({\r\n        word: this.state.value,\r\n        value: \"\",\r\n        result: \"딩동댕\"\r\n      });\r\n\r\n\r\n    } else {\r\n      this.setState({\r\n        value: \"\",\r\n        result: \"땡\"\r\n      });\r\n    }\r\n    this.inputRef.current.focus();\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({ value: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>끝말잇기, createRef를 이용한 참조</h1>\r\n        <div>{this.state.word}</div>\r\n        <form onSubmit={this.onSubmit}>\r\n          <Space>\r\n            <input\r\n              type=\"text\"\r\n\r\n\r\n              ref={this.inputRef}\r\n              value={this.state.value}\r\n              onChange={this.onChange}\r\n            />\r\n            <button className=\"ant-btn\">입력</button>\r\n          </Space>\r\n        </form>\r\n        <div>{this.state.result}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordRelayClass;\r\n","import React from \"react\";\r\n\r\n//class Baseball_Try extends React.Component {\r\nclass Baseball_Try extends React.PureComponent {\r\n//PureComponent 사용시 state가 변경되지 않는 한 render되지 않는다. 성능향상\r\n\r\n    render() {\r\n        return (\r\n            <li>\r\n                <div>{this.props.tryInfo.try}</div>\r\n                <div>{this.props.tryInfo.resualt}</div>\r\n\r\n\r\n             </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Baseball_Try;\r\n","import React from \"react\";\r\nimport { Space } from \"antd\";\r\n// import Styles from \"./ClassComponentStyles\";\r\nimport Baseball_Try from '../piece/BaseballClass_Try';\r\n\r\n\r\n\r\n//숫자 네개를 겹치지 않고 랜덤하게 뽑는 함수\r\nfunction getNumbers() {\r\n    const candidate = [1,2,3,4,5,6,7,8,9];\r\n    const array = [];\r\n    for(let i = 0; i < 4; i++) {\r\n        const chosen = candidate.splice(Math.floor(Math.random() * (9 - i)), 1)[0];\r\n        // console.log(chosen, candidate);\r\n        // 9 (8) [1, 2, 3, 4, 5, 6, 7, 8]\r\n        // 4 (7) [1, 2, 3, 5, 6, 7, 8]\r\n        // 3 (6) [1, 2, 5, 6, 7, 8]\r\n        // 7 (5) [1, 2, 5, 6, 8]\r\n        // splice(n,n)[0] 에서 [0]을 안붙일경우 잘라낸 숫자가 배열에 담긴 채로 반환 됨. \r\n        //[9] (8) [1, 2, 3, 4, 5, 6, 7, 8]\r\n        array.push(chosen);\r\n    }\r\n     console.log(\"정답 : \", array.join('')); //[9,4,3,7]\r\n    // console.log(array.join('')); //9368\r\n    // console.log(typeof array.join(''));  //string\r\n    return array;\r\n}\r\n\r\nclass BaseballClass extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            resualt: '',\r\n            value: '',\r\n            answer : getNumbers(), // ex [1, 3, 4,5]\r\n            tries : [], \r\n            // 배열에 값을 추가할 때 push를 쓰지 않는다. \r\n            // push는 배열의 원본을 바꾸고, react는 원본이 바뀔 경우 arry === arry 는 true를 뱉으므로 render를 추가로 실행 하지 않는다.\r\n\r\n            // arry == arry2  false가 나와야 (참조가 끊어져야) state의 변경을 인식하고 새로 render 한다.\r\n        };\r\n    }\r\n\r\n   onSubmitForm = (e) => {\r\n    e.preventDefault();\r\n    if(this.state.value === this.state.answer.join('')) {  // [1,2,3,4].join  > \"1234\"\r\n        // 정답이면\r\n        this.setState((prevState)=>{ \r\n            return {\r\n                resualt : \"홈런\",\r\n                tries : [...prevState.tries, {try : this.state.value, resualt: \"홈런\"}],  // 배열에 값을 추가하는 방법 .push 대신 사용. [...기존값, 추가할 값]\r\n            }\r\n        })\r\n        console.log(\"tries \", this.state.tries)\r\n    } else {\r\n        // 오답이면\r\n        console.log(\"this.state.value\", this.state.value); //1234\r\n\r\n\r\n        const answerArray = this.state.value.split('').map((value) => parseInt(value)); \r\n        // .split('') : 연속된 숫자(문자)를 한글자씩 잘라 배열로 담음. \r\n        // 1234 -> [\"1\",\"2\",\"3\",\"4\"] => string\r\n        // parseInt(value) 를 사용하여 문자열을 숫자로 바꿈\r\n        // console.log(\"answerArray \", answerArray); //[2, 1, 3, 3]\r\n        let strike = 0;\r\n        let ball = 0;\r\n        if(this.state.tries.length >= 9) {\r\n            this.setState({\r\n                resualt : `10번 넘게 틀려서 실패. 답은 ${this.state.answer.join('')}`,\r\n            })\r\n            alert(\"게임을 다시 시작합니다.\");  //이 코드가 10번넘게.... 보다 먼저 실행 됨.\r\n            this.setState({\r\n                value: '',\r\n                answer : getNumbers(),\r\n                tries : [], \r\n\r\n            })\r\n        } else {\r\n            for(let i=0; i<4; i++) {\r\n                if(answerArray[i] === this.state.answer[i]) {\r\n                    strike += 1;\r\n                } else if (this.state.answer.includes(answerArray[i])) {\r\n                    ball += 1;\r\n                }\r\n            }\r\n            this.setState((prevState)=>{\r\n                return {\r\n                    tries: [...this.state.tries, {try : this.state.value, resualt: `${strike} 스트라이크, ${ball} 볼입니다.`}],\r\n                    value: '',\r\n                }\r\n            })\r\n\r\n            this.input.focus();\r\n        }\r\n    }\r\n\r\n   }\r\n\r\n   onChangeInput = (e) => {\r\n       this.setState({value : e.target.value})\r\n   }\r\n\r\n    //변수 선언. const input으로 선언하면 에러가 남.\r\n    input; \r\n\r\n    onRefInput = (e) => { this.input = e }\r\n\r\n\r\n  render() {\r\n      return (\r\n          <div>\r\n            <h1>야구게임: 자식 컴포넌트 분리와 props 전달, .map(배열순회)를 통한 엘리먼트 동적생성</h1>\r\n            <div>{this.state.resualt}</div>\r\n            <form onSubmit={this.onSubmitForm}>\r\n                <Space>\r\n                    <input type=\"number\" ref={this.onRefInput} value={this.state.value} onChange={this.onChangeInput} />\r\n                    <button className=\"ant-btn\">입력</button>\r\n\r\n                </Space>\r\n            </form>\r\n            <div>시도횟수 : {this.state.tries.length}</div>\r\n            <ul>\r\n                {\r\n                    this.state.tries.map((value, index)=> (\r\n                       <Baseball_Try key={`${index + 1}차 시도`} tryInfo={value} index={index}/>\r\n                    ))\r\n                }\r\n            </ul>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\n\r\nexport default BaseballClass;\r\n","import React from \"react\";\r\n\r\n\r\n//class LifeCycleClass extends React.PureComponent {\r\nclass LifeCycleClass extends React.Component {\r\n    state = {\r\n        counter : true,\r\n    }\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(nextProps, nextState);\r\n        if(this.state.counter !== nextState.counter) {\r\n            // console.log(\"바뀜\");\r\n            return true; // 렌더링 함.\r\n        }\r\n       // console.log(\"안바뀜\"); \r\n        return false;  // 렌더링 하지 않음.\r\n    }\r\n\r\n\r\n\r\n\r\n    onClick1 = () => {\r\n       // this.setState( {counter : !this.state.counter} ); // 변하는 내용이 있으면 render 실행\r\n        this.setState((prevState) => {\r\n            return {\r\n                counter : !prevState.counter\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    onClick2 = () => {\r\n         this.setState( {} ); // 변하는 내용이 없으면 render 실행하지 않음.\r\n    }\r\n\r\n    render() {\r\n    console.log(\"렌더링\", this.state);\r\n    return (\r\n        <div>\r\n            <h1>성능향상 : PureComponent와 shouldComponentUpdate</h1>\r\n            <p>- <span className=\"fc-red\">react dev tool</span>의 설정 &gt; Highlight updates when components render. 를 체크해 두면 state가 바뀔 때 렌더링이 일어나는 요소를 체크할 수 있다.</p>\r\n            <p>- <span className=\"fc-red\">shouldComponentUpdate</span>를 넣어 렌더링 여부를 지정할 수 있다. shouldComponentUpdate가 있으면 버튼을 클릭해도 render가 실행되지 않는다.</p>\r\n\r\n\r\n            <p>- 컴포넌트를<span className=\"fc-red\">PureComponent</span>로 변경하면 shouldComponentUpdate가 없어도 변경된 내용이 있을 때만 렌더링 하도록 작동한다.<br />\r\n            단, state 에 배열이나 객체가 있을 경우 내부에 되도록 중첩(객체,배열)을 사용하지 않는다. 내부의 state 까지 변경되지 않으면 render가 일어나지 않는다.</p>\r\n            <p className=\"mb10\">- shouldComponentUpdate 가 필요한 경우 PureComponent가 아닌 일반 Component를 사용한다.</p>\r\n            <button className=\"ant-btn\" onClick={this.onClick1}>state 변경이 있을 때</button>\r\n            <button className=\"ant-btn\" onClick={this.onClick2}>state 변경이 없을 때</button>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\n\r\nexport default LifeCycleClass;\r\n","import React from \"react\";\r\n\r\nclass PropsClass extends React.PureComponent {\r\n    \r\n  constructor(props) {   \r\n      super(props);\r\n      console.log(\"this.props: \", this.props);\r\n      // constructor를 사용하면 constructor를 자체가 함수이므로 내부에서 다른 작업을 할 수 있다.\r\n      this.state = {\r\n          counter : this.props.counter,\r\n          text : this.props.text,\r\n      }\r\n  }  \r\n    onClick1 = () => {\r\n        this.setState({\r\n            counter : false,\r\n\r\n            text : \"변경됐다.\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <p className=\"fwb\">자식요소</p>\r\n                <div>counter: {this.state.counter.toString()}, text: {this.state.text}</div>\r\n                <button className=\"ant-btn\" onClick={this.onClick1}>자식요소의 props 변경</button>\r\n             </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PropsClass;\r\n","import React from 'react';\r\nimport PropsClass from '../piece/PropsClass'\r\n\r\n//class LifeCycleClass extends React.PureComponent {\r\nclass PropsTransmissionClass extends React.Component {\r\n    state = {\r\n        counter : true,\r\n        text : \"what??\",\r\n    }  \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>부모자식 컴포넌트간 props 전달, 자식요소에서 props 변경</h1>\r\n                <p className=\"fwb\">부모요소</p>\r\n                <div>counter : {this.state.counter.toString()}, text: {this.state.text}</div>\r\n                <PropsClass text={this.state.text} counter={this.state.counter} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default PropsTransmissionClass;\r\n","import styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  &::after {\r\n    content: '';\r\n    display:block;\r\n    clear:both;\r\n  }\r\n  Button {\r\n    margin-right: 10px;\r\n  }\r\n\r\n   #screen {\r\n    width:200px;\r\n    height:80px;\r\n    text-align:center;\r\n    user-select:none;\r\n    float:left;\r\n    margin-right:10px;\r\n    &.waiting {\r\n      background : aqua;\r\n    }\r\n\r\n\r\n    &.ready {\r\n      background : red;\r\n    }\r\n    &.now {\r\n      background : greenyellow;\r\n    }\r\n  \r\n  }\r\n`;\r\n\r\nexport default Styles;\r\n","import React from 'react';\r\nimport Styles from \"./ReactionRateStyles\";\r\n\r\nclass ReactionRateClass extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            state: 'waiting',\r\n\r\n            msg: '클릭해서 시작하세요',\r\n            result: [],\r\n        }\r\n    }\r\n\r\n    timeout;\r\n    startTime;\r\n    endTime;\r\n\r\n    onClickScreen = () => {\r\n        const { state, msg, result } = this.state;\r\n        if(state === 'waiting') {\r\n            this.setState({\r\n                state: 'ready',\r\n                msg: '초록색이 되면 클릭하세요.',\r\n            })\r\n            this.timeout = setTimeout(()=>{\r\n                this.setState({\r\n                    state: 'now',\r\n                    msg: '지금 클릭하세요.',\r\n                })  \r\n\r\n\r\n\r\n            }, Math.floor(Math.random()*1000) + 2000) // 2~3초 랜덤\r\n            this.startTime = new Date();\r\n        } else if (state === 'ready') { // 성급하게 클릭\r\n            clearTimeout(this.timeout)\r\n            this.setState({\r\n                state: 'waiting',\r\n                msg: '성급하시군요, 초록색이 된 후에 클릭하세요',\r\n            })  \r\n        } else if (state === 'now') { // 반응속도 체크\r\n            this.endTime = new Date();\r\n            this.setState((prevState)=>{\r\n                return {\r\n                    state: 'waiting',\r\n                    msg: '클릭해서 시작하세요',\r\n                    result: [...prevState.result, this.endTime - this.startTime],\r\n                }\r\n            })  \r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    onReset = () => {\r\n        this.setState((prevState)=>{\r\n            return {\r\n                result: [],\r\n            }\r\n        })  \r\n    }\r\n\r\n    renderAverage = () => {\r\n        const { result } = this.state;\r\n        return result.length === 0 \r\n        ? null\r\n        : <div>평균시간: {result.reduce((a, c) => a + c) / result.length}ms <button onClick={this.onReset} className=\"ant-btn\">리셋</button></div>\r\n            \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n           <Styles>\r\n                <h1>반응속도 : 조건문, 변경할 클래스를 state에 정의, setTimeout, clearTimeout</h1>\r\n                <p className=\"mb10\">render의 return(), 즉 jsx 안에서 for문과 if문을 사용하지 않는다. 사용은 가능하나 코드가 지저분해짐. <br />map과 삼항연산자, 보호연산자를 주로 쓴다..</p>\r\n                <div \r\n                    id=\"screen\"\r\n                    className={this.state.state}\r\n                    onClick={this.onClickScreen}\r\n                >{this.state.msg}\r\n                </div>\r\n                {/* 삼항연산자. */}\r\n                {/* {\r\n                    this.state.result.length === 0 \r\n\r\n\r\n\r\n                    ?  null \r\n                    : <div>평균시간: {this.state.result.reduce((a, c) => a + c) / this.state.result.length}ms</div>\r\n                } */}\r\n                {/* 보호연산자 (조건 && 실행) */}\r\n                {/* {\r\n                    this.state.result.length !== 0 \r\n                    && <div>평균시간: {this.state.result.reduce((a, c) => a + c) / this.state.result.length}ms</div>\r\n                } */}\r\n                {/* 메서드로 분리 */}\r\n                {this.renderAverage()}\r\n                {/* 자바스크립트 내에서 if 문 사용 */}\r\n                {/* { }를 열고 함수를 넣은 뒤 내부에 if문을 넣는다. 그리고 ()()로 감싸 즉시 실행 함수로 만든다. */}\r\n                {/* {(() => {\r\n                    if(this.state.result.length === 0) {\r\n                        return null;\r\n                    } else {\r\n                        <div>평균시간: {result.reduce((a, c) => a + c) / result.length}ms <button onClick={this.onReset} className=\"ant-btn\">리셋</button></div>\r\n\r\n\r\n\r\n                    }\r\n                })()}\r\n                 */}\r\n           </Styles>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReactionRateClass;\r\n","/* TicTacToeStyles.js */\r\n\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  table {\r\n    border: 2px solid red;\r\n    width: 150px;\r\n  }\r\n  td {\r\n    border: 2px solid #333;\r\n    width: 50px;\r\n    height: 50px;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default Styles;\r\n","/*RSPClass.js*/\r\nimport React from \"react\";\r\nimport Styles from \"./RSPStyles\";\r\n\r\nconst repCoords = {\r\n  바위: \"0\",\r\n  가위: \"-142px\",\r\n  보: \"-284px\"\r\n};\r\n\r\nconst scores = {\r\n  //나 가위일 때.                 주먹일때               보일때\r\n  가위: 1, // 1 - 1  0  비김    0 - 1 = -1 이김        (-1) - 1 = -2  짐\r\n  바위: 0, // 1 - 0  1   짐    0 - 0  = 0 비김         (-1) - 0 = -1 이김\r\n  보: -1 // 1-(-1) = 2  이김  0 - (-1) = 1 짐         (-1)  - (-1)  = 0  비김\r\n};\r\n\r\n// 컴퓨터의 현재 손 체크\r\nconst computerChoice = (imgCoord) => {\r\n  return Object.entries(repCoords).find(function (v) {\r\n    return v[1] === imgCoord;\r\n  })[0];\r\n\r\n};\r\n\r\n// 클래스 컴포넌트\r\n//-> constructor -> render -> ref -> componentDidMount\r\n// setState, props 바뀔 때 -> shuldComponentUpdate -> render => componentDidUpdate\r\n// 컴포넌트가 사라질 때  -> componentWillUnmount -> 소멸\r\nclass RSPClass extends React.Component {\r\n  state = {\r\n    result: \"\",\r\n    imgCoord: \"0\",\r\n    score: 0\r\n  };\r\n\r\n  interval;\r\n\r\n  componentDidMount() {\r\n    console.log(\"componentDidMount : 컴포넌트 첫 렌더링\");\r\n    // const { imgCoord } = this.state; 밖에 두면 interval 안에서 해당 값을 참조할 수 없다.\r\n    // 비동기 요청 많이 함. setInterval\r\n    // return this.interval = setInterval(this.changeHand, 100);\r\n\r\n  }\r\n\r\n  shuldComponentUpdate() {\r\n    //  console.log(\"shuldComponentUpdate : 컴포넌트 업데이트(렌더링) 전\");\r\n    return (this.interval = setInterval(this.changeHand, 100));\r\n    // retrun ture 일 경우에만 리렌더링 됨. false이면 리렌더링 되지 않음.\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    //   console.log(\"componentDidUpdate : 컴포넌트 업데이트(렌더링) 후. 최초 렌더링에서는 호출되지 않음.\");\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"componentWillUnmount : 컴포넌트 제거되기 직전\");\r\n    // 비동기 요청 제거 많이 함. clearInterval\r\n    // 제거해주지 않으면 컴포넌트가 unmount 되어 화면에 나타나지 않아도 계속 setInterval이 발행함.\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n\r\n  start = () => {\r\n    this.interval = setInterval(this.changeHand, 100);\r\n  };\r\n\r\n  changeHand = () => {\r\n    // 비동기 함수(Interval)안에서 imgCoord 바깥 변수를 참조할 수 없다. 클로저 문제\r\n    const { imgCoord } = this.state;\r\n    // console.log(\"imgCoord\", imgCoord)\r\n    // console.log(\"repCoords.바위\", repCoords.바위)\r\n    if (imgCoord === repCoords.바위) {\r\n      this.setState({\r\n        imgCoord: repCoords.가위\r\n      });\r\n    } else if (imgCoord === repCoords.가위) {\r\n      //가위\r\n      this.setState({\r\n        imgCoord: repCoords.보\r\n      });\r\n    } else if (imgCoord === repCoords.보) {\r\n\r\n      //보\r\n      this.setState({\r\n        imgCoord: repCoords.바위\r\n      });\r\n    }\r\n  };\r\n\r\n  onClickBtn = (choice) => {\r\n    const { imgCoord } = this.state;\r\n    clearInterval(this.interval);\r\n    const myScore = scores[choice];\r\n    const cpuScore = scores[computerChoice(imgCoord)];\r\n    const diff = myScore - cpuScore;\r\n    console.log(myScore);\r\n\r\n    if (diff === 0) {\r\n      this.setState({\r\n        result: \"비겼습니다.\"\r\n      });\r\n\r\n    } else if ([-1, 2].includes(diff)) {\r\n      this.setState((prevState) => {\r\n        return {\r\n          result: \"이겼습니다....\",\r\n          score: prevState.score + 1\r\n        };\r\n      });\r\n    } else {\r\n      this.setState((prevState) => {\r\n        return {\r\n          result: \"졌습니다...\",\r\n          score: prevState.score - 1\r\n        };\r\n      });\r\n    }\r\n    setTimeout(() => {\r\n      this.interval = setInterval(this.changeHand, 100);\r\n    }, 1000);\r\n  };\r\n\r\n  render() {\r\n    // console.log(\"가위바위보 렌더\")\r\n\r\n\r\n    const { result, imgCoord, score } = this.state;\r\n    return (\r\n      <Styles>\r\n        <h1>\r\n          가위바위보: LifeCycle / setInterval, clearInterval, setTimeout 과\r\n          컴포넌트 생애주기.\r\n        </h1>\r\n        <p>\r\n          <span className=\"fc-blue\">비동기 요청(setInterval)</span> 등은 주로\r\n          <span className=\"fc-red\"> componentDidMount</span>에서 지정하고\r\n          <span className=\"fc-red\"> componentWillUnmount</span>에서\r\n          clearInterval한다.\r\n        </p>\r\n        <p>\r\n          componentDidMount, shuldComponentUpdate, componentDidUpdate,\r\n          componentWillUnmount는 클래스 내 다른 메서드와 다르게 화살표 함수 없이\r\n          다음과 같이 사용된다.\r\n          <br /> componentWillUnmount() &#123; ... &#125;\r\n        </p>\r\n        <div\r\n          id=\"computer\"\r\n          style={{\r\n            background: `url(https://en.pimg.jp/023/182/267/1/23182267.jpg) ${imgCoord} 0`\r\n          }}\r\n        />\r\n        <div>\r\n          <button className=\"ant-btn\" onClick={this.start}>\r\n            스타트\r\n          </button>\r\n          <button\r\n            id=\"rock\"\r\n            className=\"ant-btn\"\r\n            onClick={() => this.onClickBtn(\"바위\")}\r\n          >\r\n            바위\r\n          </button>\r\n          <button\r\n            id=\"scissor\"\r\n            className=\"ant-btn\"\r\n\r\n\r\n            onClick={() => this.onClickBtn(\"가위\")}\r\n          >\r\n            가위\r\n          </button>\r\n          <button\r\n            id=\"paper\"\r\n            className=\"ant-btn\"\r\n            onClick={() => this.onClickBtn(\"보\")}\r\n          >\r\n            보\r\n          </button>\r\n        </div>\r\n        <div>{result}</div>\r\n        <div>현재 {score}점</div>\r\n      </Styles>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RSPClass;","import styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n    .ball {\r\n        display: inline-block;\r\n        border: 1px solid #000;\r\n        border-radius: 20px;\r\n        width: 40px;\r\n        height:40px;\r\n        line-height:40px; \r\n        text-align: center;\r\n        margin-right:20px;\r\n        font-size:20px;\r\n    }\r\n`;\r\n\r\nexport default Styles;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass Ball extends PureComponent {\r\n//PureComponent 사용시 state가 변경되지 않는 한 render되지 않는다. 성능향상\r\n\r\n    render() {\r\n        //console.log(\"this.props\", this.props);\r\n        const {number} = this.props;\r\n        let background;\r\n\r\n        if(number <= 10) {\r\n            background = 'red';\r\n        } else if(number <= 20) {\r\n            background = 'yellow';\r\n        } else if(number <= 30) {\r\n            background = 'orange';\r\n        } else if(number <= 40) {\r\n            background = 'blue';\r\n        } else {\r\n            background = 'green';\r\n        }\r\n        return (\r\n\r\n            <div className=\"ball\" style={{background}}>{number}</div>\r\n        )\r\n    }\r\n}\r\nexport default Ball;\r\n","import React from 'react';\r\nimport Styles from \"./LottoStyles\";\r\nimport Ball from \"../piece/BallClass\";\r\n\r\n\r\nfunction getWinNumbers() {\r\n    console.log('getWinNumbers');\r\n    const candidate = Array(45).fill().map((v,i) => i+1);  // 배열에 1부터 ~ 45까지 숫자 넣기\r\n   // console.log(candidate);\r\n    const shuffle = [];\r\n    while(candidate.length > 0) {\r\n        // splice는 배열을 반환하므로 배열의 값을 꺼내기 위해 [0]을 붙여줌.\r\n        shuffle.push(candidate.splice(Math.floor(Math.random() * candidate.length), 1)[0]);\r\n    }\r\n    // console.log(shuffle); // 랜덤한 순서로 candidate의 숫자가 들어었는 배열\r\n    const bonusNumber = shuffle[shuffle.length - 1];\r\n    const winNumbers = shuffle.slice(0, 6).sort((a, b) => a - b);\r\n    return [...winNumbers, bonusNumber];\r\n\r\n}\r\n\r\n\r\nclass LottoClass extends React.Component {\r\n    state = {\r\n        winNumbers: getWinNumbers(), // 당첨숫자들 [4, 7, 20, 21, 36, 44, 5]\r\n        winBalls: [],\r\n        bonus : null,\r\n        redo : false,\r\n    }\r\n\r\n    timeouts = [];\r\n\r\n    runTimeouts = () => {\r\n        const { winNumbers } = this.state;\r\n        for (let i = 0; i < this.state.winNumbers.length -1; i++) {\r\n            this.timeouts[i] = setTimeout(()=>{\r\n                this.setState((prevState) => {\r\n                    console.log(\"prevState\", prevState.winBalls);  // 배열상태 [4,2]\r\n                    console.log(\"prevState\", ...prevState.winBalls); // 배열이 풀린 상태 4, 2\r\n\r\n\r\n\r\n                    // console.log(\"...prevState\", [...prevState]);\r\n                    return {\r\n                        winBalls : [...prevState.winBalls, winNumbers[i]],\r\n                    };\r\n                });\r\n            }, (i + 1) * 1000) //볼이 1, 2, 3, 4.. 초에 각 하나씩 등장.\r\n        }\r\n\r\n        this.timeouts[6] = setTimeout(()=>{\r\n            this.setState({\r\n                bonus: winNumbers[6],\r\n                redo: true,\r\n            });\r\n        }, 7000)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.runTimeouts();\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // 바뀐값 인식 방법1 .state 바뀐값 바로 체크\r\n        // if(this.state.winBalls.length === 0 ) {\r\n        //     this.runTimeouts(); \r\n        // }\r\n\r\n       // 이전 state와 현재 state 비교\r\n       if(prevState.winNumbers !== this.state.winNumbers) {\r\n            this.runTimeouts(); \r\n       }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //setTimeout이 실행되지 않았는데 컴포넌트가 unmount 되었을 때 불필요한 timeout 제거\r\n        this.timeouts.forEach((v) => {\r\n            clearTimeout(v);\r\n        })\r\n    }\r\n\r\n\r\n   \r\n\r\nonClickRedo = () => {\r\n        this.setState({\r\n            winNumbers: getWinNumbers(), \r\n            winBalls: [],\r\n            bonus : null,\r\n            redo : false,\r\n        });\r\n        this.timeouts = [];\r\n    }\r\n\r\n    render() {\r\n        const { winBalls, bonus, redo } = this.state;\r\n        \r\n        return (\r\n           <Styles>\r\n              <h1>Lotto: setTimeout 여러번 사용하기, setTimeout과 clearTimeout,  배열을 리턴하는 함수, Array(45).fill().map,  배열(Splice, Slice)</h1>\r\n              <p>shuffle: 숫자를 중복되지 않게 랜덤으로 뽑아내기</p>\r\n              <p className=\"mb10\">onClick에 조건문 넣기</p>\r\n\r\n\r\n              {/* <p>{num.join(\", \")}</p> */}\r\n              <p>당첨숫자</p>\r\n              <div id=\"결과창\" className=\"mb10\">\r\n                  {\r\n                    winBalls.map((v) => <Ball key={v} number={v} />)\r\n                  }\r\n              </div>\r\n              <p>보너스</p>\r\n              <div className=\"mb10\">\r\n                  { bonus && <Ball number={bonus} /> }\r\n              </div>\r\n              {\r\n                  redo && <button className=\"ant-btn\" onClick={this.onClickRedo}>한번더!</button>\r\n              }\r\n              \r\n           </Styles>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LottoClass;\r\n","import React from \"react\";\r\nimport Styles from \"./ClassComponentStyles\";\r\nimport GuGuDanClass from \"../components/game/GuGuDanClass\";\r\nimport WordRelayClass from \"../components/game/WordRelayClass\";\r\nimport BaseballClass from \"../components/game/BaseballClass\";\r\nimport LifeCycleClass from \"../components/game/LifeCycleClass\";\r\nimport PropsTransmissionClass from \"../components/game/PropsTransmissionClass\";\r\nimport ReactionRateClass from \"../components/game/ReactionRateClass\";\r\nimport RSPClass from \"../components/game/RSPClass\";\r\nimport LottoClass from \"../components/game/LottoClass\";\r\n\r\n\r\n\r\nexport const ClassComponent = () => {\r\n    return (\r\n        <Styles>\r\n              <div className=\"item\">\r\n                <GuGuDanClass />\r\n              </div>\r\n              <div className=\"item\">\r\n                <WordRelayClass />\r\n              </div>\r\n              <div className=\"item\">\r\n                <BaseballClass />\r\n              </div>\r\n              <div className=\"item\">\r\n                <LifeCycleClass />\r\n              </div>\r\n              <div className=\"item\">\r\n                <PropsTransmissionClass />\r\n              </div>\r\n              <div className=\"item\">\r\n                <ReactionRateClass />\r\n              </div>\r\n              <div className=\"item\">\r\n                <RSPClass />\r\n              </div>\r\n              <div className=\"item\">\r\n                <LottoClass />\r\n              </div>\r\n              \r\n           \r\n        </Styles>\r\n    );\r\n}\r\n\r\nexport default ClassComponent;\r\n","import styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  Button {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport default Styles;","import React, { useState, useRef } from \"react\";\r\nimport { Space } from \"antd\";\r\n// import Styles from \"./FunctionComponentStyles\";\r\n\r\n\r\n\r\n\r\nexport const GuGuDanFunc = () => {\r\n    //useState는 함수 안에 존재 해야 한다. 함수 밖으로 빼면 안됨.\r\n    const [first, setFirst] = useState(Math.ceil(Math.random() * 9));\r\n    const [second, setSecond] = useState(Math.ceil(Math.random() * 9));\r\n    const [value, setValue] = useState('');\r\n    const [result, setResult] = useState('');\r\n    const inputRef = useRef();\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (parseInt(value) === first * second) {        \r\n            setFirst(Math.ceil(Math.random() * 9));\r\n            setSecond(Math.ceil(Math.random() * 9));\r\n            setValue('');\r\n\r\n            //setResult(`정답: ${first} 곱하기 ${second} = ${value}`)\r\n            //이전 value 값을 취하기 위해 함수를 넣고 return 한다.\r\n            setResult((prevResult) => {\r\n               console.log(prevResult)\r\n               return `정답: ${first} 곱하기 ${second} = ${value}`\r\n            });\r\n        } else {\r\n            setValue('');\r\n            setResult(\"땡\");\r\n        }\r\n        inputRef.current.focus();\r\n      \r\n    }\r\n  \r\n    const onChange = (e) => {\r\n        setValue(e.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n           <h1>구구단 : useState(Hooks)를 이용하기, useRef를 이용한 참조</h1>\r\n              <div>{first}곱하기{second}은?</div>\r\n              <form onSubmit={onSubmit}>\r\n                  <Space>\r\n                    <input type=\"number\" ref={inputRef} onChange={onChange} value={value} />\r\n                    <button className=\"ant-btn\">입력</button>\r\n                  </Space>\r\n              </form>\r\n              <div>{result}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default GuGuDanFunc;\r\n","/* WordRelayFunc.js */\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Space } from \"antd\";\r\n// import Styles from \"./ClassComponentStyles\";\r\n\r\nconst WordRelayClass = () => {\r\n\r\n  const [word, setWord] = useState(\"박은희\");\r\n  const [value, setValue] = useState(\"\");\r\n  const [result, setResult] = useState(\"\");\r\n  const inputRef = useRef();\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (word[word.length - 1] === value[0]) {\r\n      setWord(value);\r\n      setValue(\"\");\r\n      setResult(\"딩동댕\");\r\n    } else {\r\n      setValue(\"\");\r\n      setResult(\"땡\");\r\n    }\r\n    inputRef.current.focus();\r\n  };\r\n\r\n\r\n\r\n  const onChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <h1>끝말잇기</h1>\r\n      <div>{word}</div>\r\n      <form onSubmit={onSubmit}>\r\n        <Space>\r\n          <input type=\"text\" ref={inputRef} value={value} onChange={onChange} />\r\n          <button className=\"ant-btn\">입력</button>\r\n        </Space>\r\n      </form>\r\n      <div>{result}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordRelayClass;\r\n","import React, { memo } from \"react\";\r\n\r\n// 기본 props 전달\r\n// const Try = (props) => {\r\n//     return (\r\n//         <li>\r\n//             <div>{props.tryInfo.try}</div>\r\n//             <div>{props.tryInfo.resualt}</div>\r\n//          </li>\r\n//     )\r\n// }\r\n\r\n// 전달된 props를 구조분해 할 수 있다.\r\n// const Baseball_Try = ({ tryInfo }) => {\r\n\r\n//     return (\r\n//         <li>\r\n//             <div>{tryInfo.try}</div>\r\n//             <div>{tryInfo.resualt}</div>\r\n//          </li>\r\n//     )\r\n// }\r\n\r\n// memo는 class component의 PureComponent과 같이 작동한다.\r\n// 함수를 memo()로 감싼다.\r\nconst Baseball_Try = memo(({ tryInfo }) => {\r\n    return (\r\n        <li>\r\n            <div>{tryInfo.try}</div>\r\n            <div>{tryInfo.resualt}</div>\r\n         </li>\r\n    )\r\n})\r\n\r\nexport default Baseball_Try;\r\n","import React, { useState, useRef, memo } from \"react\";\r\nimport { Space } from \"antd\";\r\n// import Styles from \"./ClassComponentStyles\";\r\nimport Baseball_Try from '../piece/BaseballFunc_Try';\r\n\r\nlet count = 0; \r\n\r\n//숫자 네개를 겹치지 않고 랜덤하게 뽑는 함수\r\nfunction getNumbers() {\r\n    const candidate = [1,2,3,4,5,6,7,8,9];\r\n    const array = [];\r\n    for(let i = 0; i < 4; i++) {\r\n        const chosen = candidate.splice(Math.floor(Math.random() * (9 - i)), 1)[0];\r\n        // console.log(chosen, candidate);\r\n        // 9 (8) [1, 2, 3, 4, 5, 6, 7, 8]\r\n        // 4 (7) [1, 2, 3, 5, 6, 7, 8]\r\n\r\n        // 3 (6) [1, 2, 5, 6, 7, 8]\r\n        // 7 (5) [1, 2, 5, 6, 8]\r\n        // splice(n,n)[0] 에서 [0]을 안붙일경우 잘라낸 숫자가 배열에 담긴 채로 반환 됨. \r\n        //[9] (8) [1, 2, 3, 4, 5, 6, 7, 8]\r\n        array.push(chosen);\r\n    }\r\n    console.log(\"정답 : \", array.join('')); //[9,4,3,7]\r\n    console.log(count++)\r\n    // console.log(array.join('')); //9368\r\n    // console.log(typeof array.join(''));  //string\r\n    return array;\r\n}\r\n\r\nconst BaseballFunc = memo(() => {\r\n    const [resualt, setResualt] = useState('');\r\n    const [value, setValue] = useState('');\r\n    const [answer, setAnswer] = useState(getNumbers); // ex [1, 3, 4,5] useState안에 함수명()를 넣으면 여러번 호출됨.\r\n    const [tries, setTries] = useState([]);\r\n    // 배열에 값을 추가할 때 push를 쓰지 않는다. \r\n\r\n\r\n    // push는 배열의 원본을 바꾸고, react는 원본이 바뀔 경우 arry === arry 는 true를 뱉으므로 render를 추가로 실행 하지 않는다.\r\n    // arry == arry2  false가 나와야 (참조가 끊어져야) state의 변경을 인식하고 새로 render 한다.\r\n\r\n    const inputRef = useRef();\r\n\r\n   const onSubmitForm = (e) => {\r\n    e.preventDefault();\r\n    if(value === answer.join('')) {  // [1,2,3,4].join  > \"1234\"\r\n        // 정답이면\r\n        setResualt(\"홈런\");\r\n        setTries((prevState) => {\r\n            return [...prevState, {try : value, resualt: \"홈런\"}]\r\n        });// 배열에 값을 추가하는 방법 .push 대신 사용. [...기존값, 추가할 값]\r\n        console.log(\"tries \", tries)\r\n    } else {\r\n        // 오답이면\r\n        console.log(\"value: \", value); //1234\r\n\r\n\r\n        const answerArray = value.split('').map((value) => parseInt(value)); \r\n        // .split('') : 연속된 숫자(문자)를 한글자씩 잘라 배열로 담음. \r\n        // 1234 -> [\"1\",\"2\",\"3\",\"4\"] => string\r\n        // parseInt(value) 를 사용하여 문자열을 숫자로 바꿈\r\n        // console.log(\"answerArray \", answerArray); //[2, 1, 3, 3]\r\n        let strike = 0;\r\n        let ball = 0;\r\n        if(tries.length >= 9) {\r\n            setResualt(`10번 넘게 틀려서 실패. 답은 ${answer.join('')}`);\r\n            alert(\"게임을 다시 시작합니다.\");  //이 코드가 10번넘게.... 보다 먼저 실행 됨.\r\n\r\n            setValue('');\r\n            setAnswer(getNumbers());\r\n            setTries([]);\r\n        } else {\r\n            for(let i=0; i<4; i++) {\r\n                if(answerArray[i] === answer[i]) {\r\n                    strike += 1;\r\n\r\n                } else if (answer.includes(answerArray[i])) {\r\n                    ball += 1;\r\n                }\r\n            }\r\n\r\n            setTries((prevState) => {\r\n                return [...prevState, {try : value, resualt: `${strike} 스트라이크, ${ball} 볼입니다.`}]\r\n            });// 배열에 값을 추가하는 방법 .push 대신 사용. [...기존값, 추가할 값]\r\n\r\n            setValue('');\r\n            inputRef.current.focus();\r\n        }\r\n    }\r\n   }\r\n\r\n   const onChangeInput = (e) => {\r\n    setValue(e.target.value);\r\n\r\n\r\n   }\r\n\r\n    return (\r\n        <div>\r\n        <h1>야구게임: 자식 컴포넌트 분리와 props 전달, .map(배열순회)를 통한 엘리먼트 동적생성</h1>\r\n        <div>{resualt}</div>\r\n        <form onSubmit={onSubmitForm}>\r\n            <Space>\r\n                <input type=\"number\" ref={inputRef} value={value} onChange={onChangeInput} />\r\n                <button className=\"ant-btn\">입력</button>\r\n            </Space>\r\n        </form>\r\n        <div>시도횟수 : {tries.length}</div>\r\n        <ul>\r\n            {\r\n                tries.map((value, index)=> (\r\n                    <Baseball_Try key={`${index + 1}차 시도`} tryInfo={value} index={index}/>\r\n                ))\r\n\r\n            }\r\n        </ul>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\n\r\nexport default BaseballFunc;\r\n","import React, { useState } from \"react\";\r\n\r\n\r\n//class LifeCycleClass extends React.PureComponent {\r\nconst LifeCycleFunc = () => {\r\n    const [counter, setCounter] = useState(true);\r\n\r\n    const onClick1 = () => {\r\n       \r\n        setCounter((prevState) => {\r\n            console.log(\"prevState : \", typeof prevState);\r\n            return !prevState\r\n        }) // 렌더링됨.\r\n            \r\n        //setCounter(!counter) // 렌더링됨.\r\n    }\r\n\r\n    const onClick2 = () => {\r\n        // setCounter를 할 필요가 없음.\r\n    }\r\n\r\n    console.log(\"렌더링\", counter);\r\n        return (\r\n\r\n\r\n\r\n            <div>\r\n             <h1>성능향상 : Hooks와 성능향상</h1>\r\n            <p>- <span className=\"fc-red\">react dev tool</span>의 설정 &gt; Highlight updates when components render. 를 체크해 두면 state가 바뀔 때 렌더링이 일어나는 요소를 체크할 수 있다.</p>\r\n            <p>- Class Component의 <span className=\"fc-red\">shouldComponentUpdate</span>와 다르게 function Component의 hooks는 변경된 사항이 없으면 setState를 할 필요도 없다.</p>\r\n            <p className=\"mb10\">- 자식 컴포넌트에 <span className=\"fc-red\">memo</span>를 적용하면 변경될 렌더 호출시 마다 자식컴포넌트가 모두 렌더링 되는 현상을 막을 수 있다. 야구게임의 BaseballFunc_Try 참고</p>\r\n            <button className=\"ant-btn\" onClick={onClick1}>state 변경이 있을 때</button>\r\n            <button className=\"ant-btn\" onClick={onClick2}>state 변경이 없을 때는 setState를 할 필요가 없으므로 패쓰</button>\r\n        </div>\r\n        )\r\n}\r\n\r\n\r\nexport default LifeCycleFunc;\r\n","import React, {useState} from \"react\";\r\n\r\nconst PropsFunc = (props) => {   \r\n  //  props.text = \"hello\"; 부모로 받은 props를 직접 바꿀수 없다.\r\n   console.log(\"props: \", props); \r\n   const [counter, setCounter] = useState(props.counter);\r\n   const [text, setText] = useState(props.text);\r\n   const onClick = () => {\r\n        setCounter(false);\r\n        setText(\"변경됐다\");\r\n    }      \r\n    return (\r\n        <div>\r\n            <p className=\"fwb\">자식요소</p>\r\n            <div>counter: {counter.toString()}, text: {text}</div>\r\n            <button className=\"ant-btn\" onClick={onClick}>자식 요소의 props 변경</button>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default PropsFunc;\r\n","import React from \"react\";\r\nimport PropsFunc from '../piece/PropsFunc'\r\n\r\n//class LifeCycleClass extends React.PureComponent {\r\nconst PropsTransmissionFunc = () => {\r\n\r\n    const counter = true;\r\n    const text = \"what?\"\r\n\r\n    return (\r\n        <div>\r\n            <h1>부모자식 컴포넌트간 props 전달, 자식요소에서 props 변경</h1>\r\n            <p className=\"fwb\">부모요소</p>\r\n\r\n\r\n            <div>counter : {counter.toString()}, text: {text}</div>\r\n            <PropsFunc text={text} counter={counter} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PropsTransmissionFunc;\r\n","import React, { useState, useRef } from 'react';\r\nimport Styles from \"./ReactionRateStyles\";\r\n\r\nconst ReactionRateClass = () => {\r\n    const [state, setState] = useState('waiting');\r\n    const [msg, setMsg] = useState('클릭해서 시작하세요');\r\n    const [result, setResult] = useState([]);\r\n\r\n    // useRef 는 Dom을 컨트롤 할때,\r\n\r\n\r\n\r\n    // state와 다르게 값이 바뀌어도 render가 다시 실행되지 않는다. 화면을 바꾸고 싶지 않은데. 값이 바뀌어야 하는 경우 Ref를 사용\r\n    // timeout이나 interval 등은 Ref에 넣어 사용한다.\r\n    const timeout = useRef(null);\r\n    const startTime = useRef()\r\n    const endTime = useRef()\r\n\r\n    const onClickScreen = () => {\r\n        if(state === 'waiting') {\r\n            setState(\"ready\");\r\n            setMsg('초록색이 되면 클릭하세요.');\r\n            timeout.current = setTimeout(()=>{\r\n                setState(\"now\");\r\n                setMsg('지금 클릭하세요');\r\n            }, Math.floor(Math.random()*1000) + 2000) // 2~3초 랜덤\r\n            startTime.current = new Date();\r\n        } else if (state === 'ready') { // 성급하게 클릭\r\n            clearTimeout(timeout.current);\r\n            setState(\"waiting\");\r\n            setMsg('성급하시군요, 초록색이 된 후에 클릭하세요');\r\n\r\n\r\n\r\n        } else if (state === 'now') { // 반응속도 체크\r\n            endTime.current = new Date();\r\n            setState(\"waiting\");\r\n            setMsg('클릭해서 시작하세요');\r\n            setResult((prevResult) => {\r\n                return [...prevResult, endTime.current - startTime.current]\r\n            });\r\n       \r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        setResult([]);\r\n    }\r\n\r\n    const renderAverage = () => {\r\n        return result.length === 0 \r\n        ? null\r\n        : <div>평균시간: {result.reduce((a, c) => a + c) / result.length}ms <button onClick={onReset} className=\"ant-btn\">리셋</button></div>\r\n            \r\n    }\r\n\r\n\r\n    \r\n    return (\r\n        <Styles>\r\n            <h1>반응속도 : 조건문, 변경할 클래스를 state에 정의, setTimeout, clearTimeout, useRef의 또다른 사용</h1>\r\n            <p>render의 return(), 즉 jsx 안에서 for문과 if문을 사용하지 않는다. 사용은 가능하나 코드가 지저분해짐. <br />map과 삼항연산자, 보호연산자를 주로 쓴다..</p>\r\n            <p className=\"mb10\">timeout이나 interval 과 관련된 변수 등은 Ref에 넣어 사용한다.</p>\r\n            <div \r\n                id=\"screen\"\r\n                className={state}\r\n                onClick={onClickScreen}\r\n            >{msg}\r\n            </div>\r\n            {/* 삼항연산자. */}\r\n            {/* {\r\n                result.length === 0 \r\n                ?  null \r\n\r\n\r\n\r\n                : <div>평균시간: {result.reduce((a, c) => a + c) / result.length}ms</div>\r\n            } */}\r\n            {/* 보호연산자 (조건 && 실행) */}\r\n            {/* {\r\n                result.length !== 0 \r\n                && <div>평균시간: {result.reduce((a, c) => a + c) / result.length}ms</div>\r\n            } */}\r\n            {/* 메서드로 분리 */}\r\n            {renderAverage()}\r\n            \r\n        </Styles>\r\n    );\r\n}\r\n\r\nexport default ReactionRateClass;\r\n","/* RSPFunc.js */\r\n\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport Styles from \"./RSPStyles\";\r\n\r\nconst repCoords = {\r\n  바위: \"0\",\r\n  가위: \"-142px\",\r\n  보: \"-284px\"\r\n};\r\n\r\nconst scores = {\r\n  //나 가위일 때.                 주먹일때               보일때\r\n  가위: 1, // 1 - 1  0  비김    0 - 1 = -1 이김        (-1) - 1 = -2  짐\r\n  바위: 0, // 1 - 0  1   짐    0 - 0  = 0 비김         (-1) - 0 = -1 이김\r\n  보: -1 // 1-(-1) = 2  이김  0 - (-1) = 1 짐         (-1)  - (-1)  = 0  비김\r\n};\r\n\r\n// 컴퓨터의 현재 손 체크\r\nconst computerChoice = (imgCoord) => {\r\n  return Object.entries(repCoords).find(function (v) {\r\n    return v[1] === imgCoord;\r\n\r\n  })[0];\r\n};\r\n\r\nconst RSPFunc = () => {\r\n  const [result, setResult] = useState(\"\");\r\n  const [imgCoord, setImgCoord] = useState(repCoords.바위);\r\n  const [score, setScore] = useState(0);\r\n  const interval = useRef(null);\r\n\r\n  // componentDidMount, ComponentDidUpdate\r\n  useEffect(() => {\r\n    // unmount 될 때 clear\r\n    interval.current = setInterval(changeHand, 100);\r\n    // console.log(\"업데이트 때마다 실행\");\r\n\r\n    // componentWillUnmount\r\n    return function () {\r\n      clearInterval(interval.current);\r\n      //console.log(\"업데이트 때마다 계속 clean up : component. unmount\");\r\n    };\r\n\r\n  }, [imgCoord]);\r\n\r\n  const start = () => {\r\n    // 스타트 누르면 실행\r\n  };\r\n\r\n  // useEffect(() => {\r\n\r\n  // }, [imgCoord]);\r\n\r\n  const changeHand = () => {\r\n    if (imgCoord === repCoords.바위) {\r\n      setImgCoord(repCoords.가위);\r\n    } else if (imgCoord === repCoords.가위) {\r\n      //가위\r\n      setImgCoord(repCoords.보);\r\n    } else if (imgCoord === repCoords.보) {\r\n      //보\r\n      setImgCoord(repCoords.바위);\r\n    }\r\n  };\r\n\r\n  const onClickBtn = (choice) => () => {\r\n    clearInterval(interval.current);\r\n    const myScore = scores[choice];\r\n    const cpuScore = scores[computerChoice(imgCoord)];\r\n    const diff = myScore - cpuScore;\r\n\r\n    if (diff === 0) {\r\n      setResult(\"비겼습니다.\");\r\n    } else if ([-1, 2].includes(diff)) {\r\n      setResult(\"이겼습니다.\");\r\n      setScore((prevScore) => {\r\n        return prevScore + 1;\r\n      });\r\n    } else {\r\n      setResult(\"졌습니다.\");\r\n      setScore((prevScore) => {\r\n        return prevScore - 1;\r\n      });\r\n    }\r\n    setTimeout(() => {\r\n\r\n      interval.current = setInterval(changeHand, 100);\r\n\r\n    }, 2000);\r\n\r\n  };\r\n\r\n  return (\r\n    <Styles>\r\n      <h1>\r\n        가위바위보: LifeCycle / setInterval, clearInterval, setTimeout 과\r\n        컴포넌트 생애주기. useEffect, Ref의 또다른 방식 참조\r\n      </h1>\r\n\r\n      <div\r\n        id=\"computer\"\r\n        style={{\r\n          background: `url(https://en.pimg.jp/023/182/267/1/23182267.jpg) ${imgCoord} 0`\r\n        }}\r\n      />\r\n      <div>\r\n        <button className=\"ant-btn\" onClick={start}>\r\n          스타트\r\n        </button>\r\n        <button id=\"rock\" className=\"ant-btn\" onClick={onClickBtn(\"바위\")}>\r\n          바위\r\n\r\n\r\n        </button>\r\n        <button id=\"scissor\" className=\"ant-btn\" onClick={onClickBtn(\"가위\")}>\r\n          가위\r\n        </button>\r\n        <button id=\"paper\" className=\"ant-btn\" onClick={onClickBtn(\"보\")}>\r\n          보\r\n        </button>\r\n      </div>\r\n      <div>{result}</div>\r\n      <div>현재 {score}점</div>\r\n    </Styles>\r\n  );\r\n};\r\n\r\nexport default RSPFunc;\r\n","import React, { memo } from \"react\";\r\n\r\nconst Ball = memo(({ number }) => {\r\n    let background;  \r\n    if(number <= 10) {\r\n        background = 'red';\r\n    } else if(number <= 20) {\r\n        background = 'yellow';\r\n    } else if(number <= 30) {\r\n        background = 'orange';\r\n    } else if(number <= 40) {\r\n        background = 'blue';\r\n\r\n    } else {\r\n        background = 'green';\r\n    }\r\n    return (\r\n        <div className=\"ball\" style={{background}}>{number}</div>\r\n    )\r\n})\r\nexport default Ball;\r\n","import React, { useState, useRef, useEffect, useMemo, useCallback } from 'react';\r\nimport Styles from \"./LottoStyles\";\r\nimport Ball from \"../piece/BallFunc\";\r\n\r\nfunction getWinNumbers() {\r\n    console.log('getWinNumbers');\r\n    const candidate = Array(45).fill().map((v,i) => i+1);  // 배열에 1부터 ~ 45까지 숫자 넣기\r\n   // console.log(candidate);\r\n    const shuffle = [];\r\n    while(candidate.length > 0) {\r\n        // splice는 배열을 반환하므로 배열의 값을 꺼내기 위해 [0]을 붙여줌.\r\n        shuffle.push(candidate.splice(Math.floor(Math.random() * candidate.length), 1)[0]);\r\n    }\r\n    // console.log(shuffle); // 랜덤한 순서로 candidate의 숫자가 들어었는 배열\r\n\r\n\r\n\r\n    const bonusNumber = shuffle[shuffle.length - 1];\r\n    const winNumbers = shuffle.slice(0, 6).sort((a, b) => a - b);\r\n    return [...winNumbers, bonusNumber];\r\n}\r\n\r\n\r\nconst LottoFunc = () => { \r\n    // 함수형 컴포넌트는 새로 랜더링이 일어날 때 함수 전체가 다시 실행 된다.\r\n    // getWinNumbers() 를 계속해서 호출하지 않도록 useMemo를 이용해 값을 기억한다. 두번째 인자로 빈 배열을 넣어준다.\r\n    // const [winNumbers, setWinNumbers] = useState(getWinNumbers());\r\n    const lottoNumbers = useMemo(()=> getWinNumbers(), [])\r\n    const [winNumbers, setWinNumbers] = useState(lottoNumbers);\r\n    const [winBalls, setWinBalls] = useState([]);\r\n    const [bonus, setBonus] = useState(null);\r\n    const [redo, setRedo] = useState(false);\r\n    const timeouts = useRef([]);\r\n\r\n    const runTimeouts = () => {\r\n\r\n\r\n        for (let i = 0; i < winNumbers.length -1; i++) {\r\n            timeouts.current[i] = setTimeout(()=>{\r\n\r\n                setWinBalls((prevBalls) => {\r\n                    return [...prevBalls, winNumbers[i]]\r\n                })\r\n\r\n            }, (i + 1) * 1000) //볼이 1, 2, 3, 4.. 초에 각 하나씩 등장.\r\n        }\r\n\r\n        timeouts.current[6] = setTimeout(()=>{\r\n            setBonus(winNumbers[6]);\r\n            setRedo(true);\r\n        }, 7000)\r\n    }\r\n\r\n    //componentDidMount\r\n    useEffect(()=>{\r\n\r\n\r\n        console.log(\"useEffect\")\r\n       runTimeouts();\r\n\r\n        return () => {\r\n            timeouts.current.forEach((v) => {\r\n                clearTimeout(v);\r\n            })\r\n        };\r\n    }, [winNumbers])  // 배열에 값이 없으면 componentDidMount, 값이 있으면 componentDidMount + componentDidUpdate\r\n\r\n    const onClickRedo = useCallback(() => {\r\n        console.log(\"useCallback2\");\r\n        console.log(winNumbers); // 실행할때마다 변경되지 않고 동일한 값이 나옴. \r\n        //useCallback을 사용하면 기존 state 값 조차 기억해서 변경되지 않으므로\r\n        //[] 배열안에 변경을 감지한 state를 넣어주어야 한다.\r\n        setWinNumbers(getWinNumbers());\r\n        setWinBalls([]);\r\n        setBonus(null);\r\n        setRedo(false);\r\n\r\n\r\n        timeouts.current = [];\r\n    }, [winNumbers])\r\n\r\n        \r\n    return (\r\n        <Styles>\r\n            <h1>Lotto: setTimeout 여러번 사용하기, setTimeout과 clearTimeout,  배열을 리턴하는 함수, Array(45).fill().map,  배열(Splice, Slice), useMemo, useCallback</h1>\r\n            <p>shuffle: 숫자를 중복되지 않게 랜덤으로 뽑아내기</p>\r\n            <p className=\"mb10\">onClick에 조건문 넣기</p>\r\n            {/* <p>{num.join(\", \")}</p> */}\r\n            <p>당첨숫자</p>\r\n            <div id=\"결과창\" className=\"mb10\">\r\n                {\r\n                winBalls.map((v) => <Ball key={v} number={v} />)\r\n                }\r\n            </div>\r\n            <p>보너스</p>\r\n\r\n\r\n            <div className=\"mb10\">\r\n                {/* 자식 컴포넌트에 onClick 이벤트가 있을 때 호출되는 함수는 useCallback을 반드시 사용해야 한다.\r\n                그렇지 않으면 자식 컴포넌트가 생성 될 때마다 함수를 계속 재로드 하게 된다. */}\r\n                { bonus && <Ball number={bonus} onClick={onClickRedo}/> }\r\n            </div>\r\n            {\r\n                redo && <button className=\"ant-btn\" onClick={onClickRedo}>한번더!</button>\r\n            }\r\n            \r\n        </Styles>\r\n    );\r\n}\r\n\r\nexport default LottoFunc;\r\n\r\n","/* TicTacToeStyles.js */\r\n\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  table {\r\n    border: 2px solid red;\r\n    width: 150px;\r\n  }\r\n  td {\r\n    border: 2px solid #333;\r\n    width: 50px;\r\n    height: 50px;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default Styles;\r\n","import React, { useCallback, memo } from 'react';\r\nimport { CLICK_CELL } from '../game/TicTacToeFunc';\r\n\r\n\r\nconst Td = memo(({rowIndex, cellIndex, dispatch, cellData}) => {\r\n    const onClickTd = useCallback(() => {\r\n        console.log(rowIndex, cellIndex);\r\n       \r\n        // 이미 cellData가 있으면, 클릭했던 td라면\r\n        if(cellData) {\r\n            return;\r\n        }\r\n        //틱택토 메인 컴포넌트 reducer에서 다음 dispatch 처리\r\n        dispatch({ type: CLICK_CELL, row: rowIndex, cell: cellIndex })\r\n       \r\n    }, [cellData]);\r\n    \r\n    return (\r\n        <td onClick={onClickTd}>{cellData}</td>\r\n    );\r\n})\r\n\r\n\r\nexport default Td;\r\n","import React, {memo} from 'react';\r\nimport Td from './TicTacToeTd';\r\n\r\nconst Tr = memo(({ rowData, rowIndex, dispatch }) => {\r\n    return (\r\n       <tr>\r\n          {Array(rowData.length).fill().map((td, i) => \r\n          <Td key={i} dispatch={dispatch} rowIndex={rowIndex} cellIndex={i} cellData={rowData[i]}>{''}</Td>\r\n          )}\r\n       </tr>\r\n    );\r\n})\r\n\r\nexport default Tr;\r\n","import React from 'react';\r\nimport Tr from './TicTacToeTr';\r\n\r\nconst Table = ({ onClick, tableData, dispatch }) => {\r\n          \r\n    return (\r\n        <table>\r\n          {Array(tableData.length).fill().map((tr, i) => <Tr key={i} dispatch={dispatch} rowIndex={i} rowData={tableData[i]} />)}\r\n        </table>\r\n    );\r\n\r\n}\r\nexport default Table;\r\n","/* TicTacToeFunc.js */\r\n\r\n\r\nimport React, { useEffect, useReducer, useCallback } from \"react\";\r\nimport Styles from \"./TicTacToeStyles\";\r\nimport Table from \"../piece/TicTacToeTable\";\r\n\r\nconst initalState = {\r\n  winner: \"\",\r\n  turn: \"O\",\r\n  tableData: [\r\n    [\"\", \"\", \"\"],\r\n    [\"\", \"\", \"\"],\r\n    [\"\", \"\", \"\"]\r\n  ],\r\n  recentCell: [-1, -1]\r\n};\r\n\r\n// type값을 상수수로 빼놓는게 좋다.\r\n// 액션의 이름은 대문자로 한다.\r\n// 여러군데서 쓸수 있도록 export 한다.\r\nexport const SET_WINNER = \"SET_WINNER\";\r\nexport const CLICK_CELL = \"CLICK_CELL\";\r\n\r\n\r\nexport const CHANGE_TURN = \"CHANGE_TURN\";\r\nexport const RESET_GAME = \"RESET_GAME\";\r\n\r\nconst reducer = (state, action) => {\r\n  // 액션을 dispatch 할 때마다 reducer 부분이 실행된다.\r\n  switch (action.type) {\r\n    // state.winner = action.winner   //state를 직접 바꾸면 안된다. 새로운 객체를 만들어 바뀐값만 바꿔주어야 한다.\r\n    case SET_WINNER:\r\n      return {\r\n        ...state, //기존 state 얕은 복사\r\n        winner: action.winner // 바뀔 부분만 바꾸어 줌.\r\n      };\r\n    case CLICK_CELL: {\r\n      //기존 tableData의 값 얕은 복사\r\n      console.log(\"CLICK_CELL\");\r\n      const tableData = [...state.tableData];\r\n\r\n      tableData[action.row] = [...tableData[action.row]]; //불변성을 위한 얕은복사 //immer라는 라이브러리로 가독성 해결 가능.\r\n      tableData[action.row][action.cell] = state.turn;\r\n      return {\r\n        ...state,\r\n        tableData,\r\n        recentCell: [action.row, action.cell]\r\n      };\r\n    }\r\n    case CHANGE_TURN: {\r\n      console.log(\"CHANGE_TURN\", state.turn);\r\n      return {\r\n        ...state,\r\n        turn: state.turn === \"O\" ? \"X\" : \"O\"\r\n      };\r\n    }\r\n    case RESET_GAME: {\r\n      return {\r\n        ...state,\r\n\r\n\r\n        turn: \"O\",\r\n        tableData: [\r\n          [\"\", \"\", \"\"],\r\n          [\"\", \"\", \"\"],\r\n          [\"\", \"\", \"\"]\r\n        ],\r\n        recentCell: [-1, -1]\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst TicTacToeFunc = () => {\r\n  const [state, dispatch] = useReducer(reducer, initalState);\r\n  const { tableData, turn, winner, recentCell } = state; //구조분해\r\n  // const [winner, setWinner] = useState('');\r\n  // const [turn, setTurn] = useState('O');\r\n  // const [tableData, setTableData] = useState([['', '', ''], ['', '', ''], ['', '', '']]);\r\n\r\n\r\n  // 승자 확인. cell을 눌러 recentCell이 바뀔 때 마다 호출\r\n  useEffect(() => {\r\n    const [row, cell] = recentCell;\r\n    if (row < 0) {\r\n      return;\r\n    }\r\n    let win = false; //승자 없음\r\n    // 가로 검증\r\n    if (\r\n      tableData[row][0] === turn &&\r\n      tableData[row][1] === turn &&\r\n      tableData[row][2] === turn\r\n    ) {\r\n      win = true;\r\n    }\r\n    // 세로 검증\r\n    if (\r\n      tableData[0][cell] === turn &&\r\n      tableData[1][cell] === turn &&\r\n      tableData[2][cell] === turn\r\n    ) {\r\n      win = true;\r\n\r\n    }\r\n    // 대각선 검증\r\n    if (\r\n      tableData[0][0] === turn &&\r\n      tableData[1][1] === turn &&\r\n      tableData[2][2] === turn\r\n    ) {\r\n      win = true;\r\n    }\r\n\r\n    if (\r\n      tableData[0][2] === turn &&\r\n      tableData[1][1] === turn &&\r\n      tableData[2][0] === turn\r\n    ) {\r\n      win = true;\r\n    }\r\n    console.log(win, tableData);\r\n    if (win) {\r\n\r\n      //승리시\r\n      dispatch({ type: SET_WINNER, winner: turn });\r\n    } else {\r\n      //승리 없으면 다음 턴, 다 찼으면 무승부\r\n      // 칸이 다 차 있으면 무승부\r\n      let all = true;\r\n      tableData.forEach((row) => {\r\n        row.forEach((cell) => {\r\n          //비어있는 셀이 있으면 무승부가 아님\r\n          if (!cell) {\r\n            all = false;\r\n          }\r\n        });\r\n      });\r\n      //무승부이면\r\n      if (all) {\r\n        dispatch({ type: RESET_GAME });\r\n      } else {\r\n        dispatch({ type: CHANGE_TURN });\r\n      }\r\n\r\n\r\n    }\r\n  }, [recentCell]);\r\n\r\n  return (\r\n    <Styles>\r\n      <h1>\r\n        틱택톡 : useReducer, useCallback, 여러뎁스 이상 부모 자식 요소 간\r\n        이벤트, props 전달, 변수의 export\r\n      </h1>\r\n      <p>변수를 export 하여 하위 컴포넌트에서 사용할 수 있다.</p>\r\n      <Table tableData={tableData} dispatch={dispatch} />\r\n      {winner && <div>{winner}님의 승리</div>}\r\n    </Styles>\r\n  );\r\n};\r\n\r\nexport default TicTacToeFunc;\r\n","import styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n    table {border: 2px solid red; width:auto;}\r\n    td {border: 1px solid #333; width:25px; height:25px; text-align:center;}\r\n`;\r\n\r\nexport default Styles;\r\n","import React, { useContext, useCallback, useMemo, memo } from 'react';\r\nimport { CLICK_MINE, CODE, FLAG_CELL, NORMALIZE_CELL, OPEN_CELL, QUESTION_CELL, TableContext } from '../game/MineSearchFunc';\r\n\r\nconst getTdStyle = (code) => {\r\n  switch (code) {\r\n    case CODE.NORMAL:\r\n    case CODE.MINE:\r\n      return {\r\n        background: '#444',\r\n      };\r\n    case CODE.CLICKED_MINE:\r\n    case CODE.OPENED:\r\n\r\n      return {\r\n        background: 'white',\r\n      };\r\n    case CODE.QUESTION_MINE:\r\n    case CODE.QUESTION:\r\n      return {\r\n        background: 'yellow',\r\n      };\r\n    case CODE.FLAG_MINE:\r\n    case CODE.FLAG:\r\n      return {\r\n        background: 'red',\r\n      };\r\n    default:\r\n      return {\r\n        background: 'white',\r\n      };\r\n  }\r\n};\r\n\r\nconst getTdText = (code) => {\r\n    switch (code) {\r\n        case CODE.NORMAL:\r\n\r\n          return '';\r\n        case CODE.MINE:\r\n          return 'X';\r\n        case CODE.CLICKED_MINE:\r\n          return '펑';\r\n        case CODE.FLAG_MINE:\r\n        case CODE.FLAG:\r\n          return '!';\r\n        case CODE.QUESTION_MINE:\r\n        case CODE.QUESTION:\r\n          return '?';\r\n        default:\r\n            return code || \"\"; //클릭한 근처 셀을 조사한 뒤 마인이 있으면 마인 갯수를 표시하고, 없으면 아무것도 표시하지 않는다.\r\n    }\r\n}\r\n\r\nconst Td = memo(({ rowIndex, cellIndex }) => {\r\n    const { tableData, dispatch, halted } = useContext(TableContext);\r\n    const onClickTd = useCallback(() => {\r\n        console.log(\"halted\", halted)\r\n        if (halted) {\r\n            return;\r\n\r\n\r\n          }\r\n          switch (tableData[rowIndex][cellIndex]) {\r\n            case CODE.OPENED:\r\n            case CODE.FLAG_MINE:\r\n            case CODE.FLAG:\r\n            case CODE.QUESTION_MINE:\r\n            case CODE.QUESTION:\r\n              return;\r\n            case CODE.NORMAL:\r\n              dispatch({ type: OPEN_CELL, row: rowIndex, cell: cellIndex });\r\n              return;\r\n            case CODE.MINE:\r\n              dispatch({ type: CLICK_MINE, row: rowIndex, cell: cellIndex });\r\n              return;\r\n            default:\r\n              return;\r\n          }\r\n        }, [tableData[rowIndex][cellIndex], halted]);\r\n        const onRightClickTd = useCallback((e) => {\r\n\r\n        e.preventDefault();\r\n        console.log(\"halted\", halted)\r\n        e.preventDefault();\r\n        if (halted) {\r\n            return;\r\n        }\r\n        switch (tableData[rowIndex][cellIndex]) {\r\n            case CODE.NORMAL:  //일반칸을 마우스 우클릭시 FRAG\r\n            case CODE.MINE:  //지뢰칸을 마우스 우클릭시 FRAG\r\n                dispatch({ type: FLAG_CELL, row: rowIndex, cell: cellIndex });\r\n                console.log(\"플래그인데1\");\r\n                console.log(tableData[rowIndex][cellIndex]);\r\n                return;  //return 또는 break 둘다 끊어주는 용도임.\r\n            case CODE.FLAG_MINE:  \r\n            case CODE.FLAG:  \r\n                dispatch({ type: QUESTION_CELL, row: rowIndex, cell: cellIndex });\r\n                console.log(\"플래그인데2\");\r\n                return;\r\n            case CODE.QUESTION_MINE:  \r\n\r\n\r\n            case CODE.QUESTION:  \r\n                dispatch({ type: NORMALIZE_CELL, row: rowIndex, cell: cellIndex })\r\n                return;\r\n            default : \r\n                return ;\r\n        }\r\n    }, [tableData[rowIndex][cellIndex], halted]);\r\n\r\n    return <RealTd onClickTd={onClickTd} onRightClickTd={onRightClickTd} data={tableData[rowIndex][cellIndex]} />;\r\n})\r\n\r\nconst RealTd = memo(({ onClickTd, onRightClickTd, data}) => {\r\n    console.log('real td rendered');\r\n    return (\r\n      <td\r\n        style={getTdStyle(data)}\r\n        onClick={onClickTd}\r\n        onContextMenu={onRightClickTd}\r\n\r\n      >{getTdText(data)}</td>\r\n    )\r\n});\r\n\r\nexport default Td;\r\n","import React, {memo, useContext} from 'react';\r\nimport Td from './MineSearchTd';\r\nimport { TableContext } from '../game/MineSearchFunc';\r\n\r\nconst Tr = memo(({ rowIndex }) => {\r\n   const { tableData } = useContext(TableContext)\r\n    return (\r\n       <tr>\r\n          {tableData[0] && Array(tableData[0].length).fill().map((td, i) => {\r\n            return (\r\n              <Td rowIndex={rowIndex} cellIndex={i}/>\r\n            ) \r\n          })}\r\n\r\n       </tr>\r\n    );\r\n\r\n})\r\nexport default Tr;\r\n","import React, { useContext, memo } from 'react';\r\nimport Tr from './MineSearchTr';\r\nimport { TableContext } from '../game/MineSearchFunc';\r\n\r\n\r\n\r\nconst Table = memo(() => {\r\n    const { tableData } = useContext(TableContext)\r\n    return (\r\n        <table>\r\n          {Array(tableData.length).fill().map((tr, i) => {\r\n            return (\r\n              <Tr key={i} rowIndex={i}/>\r\n            ) \r\n          })}        \r\n        </table>\r\n\r\n    );\r\n})\r\n\r\nexport default Table;\r\n","import React, { useState, useCallback, useContext, memo } from 'react';\r\nimport { Space } from 'antd';\r\nimport {TableContext, START_GAME} from '../game/MineSearchFunc'\r\n\r\nconst Form = memo(() => {\r\n  const [row, setRow] = useState(10);\r\n  const [cell, setCell] = useState(10);\r\n  const [mine, setMine] = useState(20);\r\n  const { dispatch } = useContext(TableContext);\r\n\r\n    // 불필요한 랜더링을 막기 위해 useCallback으로 감싸는게 좋다. 함수형 컴포넌트는 state 변경시 함수 전체를 다시 랜더링 하기 때문.\r\n    const onChangeRow = useCallback((e) => {\r\n      setRow(e.target.value);\r\n    }, []);\r\n  \r\n    const onChangeCell = useCallback((e) => {\r\n      setCell(e.target.value);\r\n    }, []);\r\n  \r\n\r\n    const onChangeMine = useCallback((e) => {\r\n      setMine(e.target.value);\r\n    }, []);\r\n  \r\n    const onClickBtn = useCallback(() => {\r\n      dispatch({ type: START_GAME, row, cell, mine });\r\n    }, [row, cell, mine]);\r\n\r\n    return (\r\n        <form>\r\n          <Space>\r\n            <input type=\"number\" placeholder=\"가로갯수\" style={{ width: '100px' }} value={row} onChange={onChangeRow} />\r\n            <input type=\"number\" placeholder=\"세로갯수\" style={{ width: '100px' }} value={cell} onChange={onChangeCell} />\r\n            <input type=\"number\" placeholder=\"지뢰갯수\" style={{ width: '100px' }} value={mine} onChange={onChangeMine} />\r\n            <button className=\"ant-btn\" onClick={onClickBtn}>생성</button>\r\n          </Space>\r\n        </form>\r\n    );\r\n})\r\n\r\n\r\nexport default Form;\r\n","/*MineSearchFunc.js*/\r\nimport React, { useReducer, createContext, useMemo, useEffect } from 'react';\r\nimport Styles from \"./MineSearchStyles\";\r\nimport Table from \"../piece/MineSearchTable\";\r\nimport Form from \"../piece/MineSearchForm\";\r\n\r\nexport const CODE = {\r\n    MINE: -7,\r\n    NORMAL : -1,  //일반칸. 닫혀있는 칸\r\n    QUESTION: -2,\r\n    FLAG: -3,\r\n    QUESTION_MINE: -4,  //? + 지뢰\r\n    FLAG_MINE: -5,      //깃발 + 지뢰\r\n    CLICKED_MINE : -6,  //지뢰 밟은 경우\r\n    OPENED: 0, //열려있는 빈 칸\r\n\r\n\r\n}\r\n\r\n// createContext가 함수라서 다음과 같이 실행하는 것.\r\nexport const TableContext = createContext(\r\n   //초기값. \r\n    {\r\n        tableData : [],\r\n        halted: true, \r\n        dispatch: () => {},\r\n    }\r\n);\r\n\r\nconst initialState = {\r\n    tableData: [],\r\n    data: {\r\n        row: 0,\r\n        cell: 0,\r\n        mine: 0,\r\n    },\r\n    timer: 0,\r\n    result: '',\r\n    halted: true, // 게임 중단 여부\r\n    openedCount: 0,\r\n\r\n\r\n}\r\n\r\nexport const START_GAME = 'START_GAME';\r\nexport const OPEN_CELL = 'OPEN_CELL';\r\nexport const CLICK_MINE = 'CLICK_MINE';\r\nexport const FLAG_CELL = 'FLAG_CELL';\r\nexport const QUESTION_CELL = 'QUESTION_CELL';\r\nexport const NORMALIZE_CELL = 'NORMALIZE_CELL';\r\nexport const INCREMENT_TIMER = 'INCREMENT_TIMER';\r\n\r\nconst plantMine = (row, cell, mine) => {\r\n    console.log(row, cell, mine);\r\n    const candidate = Array(row*cell).fill().map((arr, i) => {\r\n        return i;\r\n    })\r\n    console.log(candidate);  // [0,1,2, .... 99]  10*10이니까\r\n    var shuffle = [];\r\n    while(candidate.length > row * cell - mine) {\r\n        const chosen = candidate.splice(Math.floor(Math.random() * candidate.length), 1)[0];\r\n        shuffle.push(chosen);\r\n    }\r\n\r\n    console.log(shuffle);  //[13, 73, 12, 89, 36, 4, 22, 11, 23, 53] mine 갯수만큼 랜덤한 숫자가 뽑힘. 폭탄의 위치값. 13 은 1,3 좌표임.\r\n    // 100개의 정상적인 칸을 생성.\r\n    const data = [];\r\n    for(let i=0; i<row; i++) {\r\n        const rowData = [];\r\n        data.push(rowData);\r\n        for(let j=0; j<cell; j++) {\r\n            rowData.push(CODE.NORMAL);\r\n        }\r\n    }\r\n    //폭탄심기\r\n    for(let k=0; k<shuffle.length; k++) {\r\n        const ver = Math.floor(shuffle[k] / cell);  //13/10 = 1\r\n        const hor = shuffle[k] % cell;  // 13/10 의 나머지\r\n        data[ver][hor] = CODE.MINE;\r\n        // console.log(ver, hor) // 13은 각각 1, 3으로 쪼개짐.\r\n    }\r\n    console.log(data);\r\n    // 0: (10) [-1, -1, -7, -7, -1, -1, -1, -1, -1, -7]\r\n\r\n    // 1: (10) [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\r\n    // 2: (10) [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\r\n    // 3: (10) [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\r\n    // 4: (10) [-1, -1, -1, -1, -1, -1, -7, -1, -1, -1]\r\n    // 5: (10) [-1, -1, -1, -7, -1, -7, -1, -1, -1, -7]\r\n    // 6: (10) [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\r\n    // 7: (10) [-1, -1, -1, -1, -1, -7, -1, -1, -1, -1]\r\n    // 8: (10) [-1, -1, -1, -1, -1, -1, -7, -7, -1, -1]\r\n    // 9: (10) [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\r\n    return data;\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case START_GAME : \r\n            return {\r\n\r\n                ...state,\r\n                data: {\r\n                    row: action.row,\r\n                    cell: action.cell,\r\n                    mine: action.mine,\r\n                },\r\n                openedCount: 0,\r\n                tableData: plantMine(action.row, action.cell, action.mine), //지뢰생성\r\n                halted: false,  //게임을 다시 시작\r\n                timer: 0,\r\n            }\r\n        case OPEN_CELL : {\r\n            //불변성 처리\r\n            const tableData = [...state.tableData];\r\n            // tableData[action.row] = [...state.tableData[action.row]];\r\n            // tableData[action.row][action.cell] = CODE.OPENED;    \r\n            // console.log({...state})  //기존 tableData\r\n            // console.log(tableData)   //클릭해서 변경된 값 덮어씌움. -1  > 0\r\n\r\n            //클릭한 셀 뿐 아니라 주변셀에 마인이 없으면 옆의 것까지 재귀로 검사해야 한다.\r\n\r\n\r\n            //모든 셀 불변성 처리\r\n            tableData.forEach((row, i) => {\r\n                tableData[i] = [...row];\r\n            });\r\n\r\n            const checked = [];\r\n            let openedCount = 0;\r\n            console.log(tableData.length, tableData[0].length);\r\n            const checkAround = (row, cell) => {\r\n\r\n                //상하좌우 끝칸을 클릭했을 경우\r\n                if(row < 0 || row >= tableData.length || cell < 0 || cell >= tableData[0].length ) {\r\n                    return; \r\n                }\r\n\r\n                // 닫혀있는 일반 셀이 아닐 경우 건너뜀\r\n                if([CODE.OPENED, CODE.FLAG, CODE.FLAG_MINE, CODE.QUESTION_MINE, CODE.QUESTION].includes(tableData[row][cell])) {\r\n                    return;\r\n                }\r\n\r\n                /*이미 검사한 칸 건너뜀*/\r\n                if(checked.includes(row + '/' + cell)){\r\n                    return;\r\n                } else {\r\n                    checked.push(row + '/' + cell);\r\n                }\r\n\r\n                //클릭한 주변 칸 검색하여 지뢰 갯수를 표시한다.\r\n                let around = [\r\n                    tableData[row][cell - 1], tableData[row][cell + 1],\r\n                ];\r\n\r\n                // 윗줄 검사(윗줄이 있으면), 윗줄 세칸의 코드값을 배열에 추가한다.\r\n                if(tableData[row -1]) {\r\n                    // .concat() : 배열에 값을 추가\r\n                    around = around.concat([tableData[row - 1][cell - 1], tableData[row - 1][cell], tableData[row - 1][cell + 1]]);\r\n                }\r\n\r\n\r\n\r\n                // 아래줄 검사(윗줄이 있으면), 아래줄 세칸의 코드값을 배열에 추가한다.\r\n                if(tableData[row + 1]) {\r\n                    // .concat() : 배열에 값을 추가\r\n                    around = around.concat([tableData[row + 1][cell - 1], tableData[row + 1][cell], tableData[row + 1][cell + 1]]);\r\n                }\r\n\r\n                console.log(\"around\", around); //[-1, -1, -7, -1, -1, -1, -1, -1]\r\n\r\n                // 주변 지뢰갯수 체크\r\n                // 배열을 돌아서 해당하는 값이 몇개인지 체크함.\r\n                //filter()의 매개변수로 넣는 함수는 불리언을 리턴해야 한다. 이때 리턴하는 값이 true인 배열의 요소만을 골라 새로운 배열을 만든다.\r\n                const count = around.filter(function (v) {\r\n                    return [CODE.MINE, CODE.FLAG_MINE, CODE.QUESTION_MINE].includes(v);\r\n                }).length;\r\n                console.log(\"count\", count); // [-7];        \r\n           \r\n\r\n                \r\n\r\n                // 주변에 지뢰가 없으면 주변 칸을 클릭한다..\r\n                if (count === 0) {\r\n                    // 윗줄을 검사하여 0 인 위치를 기준으로 상하좌우 좌표값을 찾아 배열에 추가한다.\r\n                    if (row > -1) {\r\n                        const near = [];\r\n                        if (row - 1 > -1) {\r\n                            near.push([row -1, cell - 1]);\r\n                            near.push([row -1, cell]);\r\n                            near.push([row -1, cell + 1]);\r\n                        }\r\n                        \r\n                        near.push([row, cell - 1]);\r\n                        near.push([row, cell + 1]);\r\n                        if(row + 1 < tableData.length) {\r\n                            near.push([row + 1, cell - 1 ]);\r\n                            near.push([row + 1, cell ]);\r\n\r\n                            near.push([row + 1, cell + 1 ]);\r\n                        }\r\n                        console.log(\"near\", near) // [[0, 4], [0, 5], [0, 6]]\r\n                        near.forEach((n) => {\r\n                            if (tableData[n[0]][n[1]] !== CODE.OPENED) {\r\n                              checkAround(n[0], n[1]);\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n                //칸 열때마다 count 증가\r\n                if (tableData[row][cell] === CODE.NORMAL) { // 내 칸이 닫힌 칸이면 카운트 증가\r\n                    openedCount += 1;\r\n                }\r\n                // 지뢰의 갯수를 표시\r\n                tableData[row][cell] = count;\r\n\r\n\r\n                \r\n            }\r\n            //클릭한 주변의 지뢰 갯수를 세어 칸에 입력 한다.\r\n            checkAround(action.row, action.cell);\r\n            \r\n            let halted = null;\r\n            let result = '';\r\n            console.log(state.data.row * state.data.cell - state.data.mine, state.openedCount, openedCount);\r\n            if (state.data.row * state.data.cell - state.data.mine === state.openedCount + openedCount) { // 승리\r\n                halted = true;\r\n                result = `${state.timer}초만에 승리하셨습니다`;\r\n            }\r\n            return {\r\n                ...state,\r\n                tableData,\r\n                openedCount: state.openedCount + openedCount,\r\n                halted,\r\n                result,\r\n\r\n              };\r\n        }\r\n        case CLICK_MINE: {\r\n            const tableData = [...state.tableData];\r\n            tableData[action.row] = [...state.tableData[action.row]];\r\n            tableData[action.row][action.cell] = CODE.CLICKED_MINE;\r\n            return {\r\n              ...state,\r\n              tableData,\r\n              halted: true, //게임을 멈춤. 다른칸 클릭 되지 않도록\r\n            };\r\n        }\r\n        case FLAG_CELL : {\r\n            const tableData = [...state.tableData];\r\n            tableData[action.row] = [...state.tableData[action.row]];\r\n            console.log(\"FLAG_CELL\")\r\n            //물음표를 놓을 칸이 지뢰가 있는 칸이면 CODE.FLAG_MINE 아니면 CODE.FLAG\r\n            if (tableData[action.row][action.cell] === CODE.MINE) {\r\n\r\n\r\n                tableData[action.row][action.cell] = CODE.FLAG_MINE;\r\n            } else {\r\n            tableData[action.row][action.cell] = CODE.FLAG;\r\n            }\r\n            return {\r\n                ...state,\r\n                tableData,\r\n            }\r\n        }   \r\n        case QUESTION_CELL : {\r\n            const tableData = [...state.tableData];\r\n            tableData[action.row] = [...state.tableData[action.row]];\r\n            console.log(\"QUESTION_CELL\")\r\n            //깃발을 꽂을 칸이 지뢰가 있는 칸이면 CODE.FLAG_MINE 아니면 CODE.QUESTION\r\n            if (tableData[action.row][action.cell] === CODE.FLAG_MINE) {\r\n                tableData[action.row][action.cell] = CODE.QUESTION_MINE;\r\n            } else {\r\n                tableData[action.row][action.cell] = CODE.QUESTION;\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                tableData,\r\n            };\r\n        }\r\n\r\n        case NORMALIZE_CELL: {\r\n            const tableData = [...state.tableData];\r\n            tableData[action.row] = [...state.tableData[action.row]];\r\n            console.log(\"NORMALIZE_CELL\")\r\n            //칸이 지뢰가 있는 칸이면 CODE.MINE 아니면 CODE.FLAG\r\n            if (tableData[action.row][action.cell] === CODE.QUESTION_MINE) {\r\n                tableData[action.row][action.cell] = CODE.MINE;\r\n            } else {\r\n                tableData[action.row][action.cell] = CODE.NORMAL;\r\n            }\r\n            return {\r\n                ...state,\r\n                tableData,\r\n\r\n            }\r\n        }\r\n        case INCREMENT_TIMER: {\r\n            return {\r\n                ...state,\r\n                timer: state.timer + 1,\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst MineSearchFunc = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    //구조분해\r\n    const { tableData, halted, timer, result } = state;\r\n    //캐싱\r\n    // const value = useMemo(() => ({ tableData: tableData, halted: halted, dispatch }), [tableData, halted]);\r\n    const value = useMemo(() => ({ tableData, halted, dispatch }), [tableData, halted]);\r\n    useEffect(() => {\r\n        let timer;\r\n\r\n        if (halted === false) {\r\n            timer = setInterval(() => {\r\n            dispatch({ type: INCREMENT_TIMER });\r\n            }, 1000);\r\n        }\r\n        return () => {\r\n            clearInterval(timer);\r\n        }\r\n    }, [halted]);\r\n    \r\n    return (\r\n        <Styles>\r\n            <h1>지뢰찾기 : </h1>\r\n            {/* context를 적용할 컴포넌트들을 provider로 묶어 준다. */}\r\n            {/* <TableContext.Provider value={{ tableData: state.tableData, dispatch }}> 성능문제로 인해 value는 따로 빼서 useMemo로 감싸준다. */}\r\n            <TableContext.Provider value={value}>\r\n                <Form />\r\n                <div>{timer}</div>\r\n                <Table />\r\n                <div>{result}</div>\r\n            </TableContext.Provider>\r\n\r\n        </Styles>\r\n    );\r\n}\r\n\r\nexport default MineSearchFunc;\r\n","import React from \"react\";\r\n// import { Space } from \"antd\";\r\nimport Styles from \"./FunctionComponentStyles\";\r\nimport GuGuDanFunc from \"../components/game/GuGuDanFunc\";\r\nimport WordRelayFunc from \"../components/game/WordRelayFunc\";\r\nimport BaseballFunc from \"../components/game/BaseballFunc\";\r\nimport LifeCycleFunc from \"../components/game/LifeCycleFunc\";\r\nimport PropsTransmissionFunc from \"../components/game/PropsTransmissionFunc\";\r\nimport ReactionRateFunc from \"../components/game/ReactionRateFunc\";\r\nimport RSPFunc from \"../components/game/RSPFunc\";\r\nimport LottoFunc from \"../components/game/LottoFunc\";\r\nimport TicTacToeFunc from \"../components/game/TicTacToeFunc\";\r\nimport MineSearchFunc from \"../components/game/MineSearchFunc\";\r\n\r\nexport const FunctionComponent = () => {\r\n    return (\r\n        <Styles>\r\n            <div className=\"item\">\r\n                <GuGuDanFunc />\r\n              </div>\r\n              <div className=\"item\">\r\n                <WordRelayFunc />\r\n              </div>\r\n              <div className=\"item\">\r\n                <BaseballFunc />\r\n              </div>\r\n              <div className=\"item\">\r\n                <LifeCycleFunc />\r\n              </div>\r\n              <div className=\"item\">\r\n                <PropsTransmissionFunc />\r\n              </div>\r\n              <div className=\"item\">\r\n                <ReactionRateFunc />\r\n              </div>\r\n              <div className=\"item\">\r\n                <RSPFunc />\r\n              </div>\r\n              <div className=\"item\">\r\n                <LottoFunc />\r\n              </div>\r\n              <div className=\"item\">\r\n                <TicTacToeFunc />\r\n              </div>\r\n              <div className=\"item\">\r\n                <MineSearchFunc />\r\n              </div>\r\n        </Styles>\r\n    );\r\n}\r\n\r\nexport default FunctionComponent;\r\n","import styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  margin-bottom: 20px;\r\n  border-bottom: 1px solid #d1d1d1;\r\n  padding-bottom: 6px;\r\n  & a {\r\n    margin-right: 20px;\r\n    padding-right: 20px;\r\n    display: inline-block;\r\n    position: relative;\r\n    &:after {\r\n      content: \"\";\r\n      background: #ccc;\r\n      width: 1px;\r\n      height: 12px;\r\n      position: absolute;\r\n      right: 0;\r\n      top: 7px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Styles;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Styles from \"./NavigationStyles\";\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <Styles>\r\n      <Link to=\"/\">Toggle(useState)</Link>\r\n      <Link to=\"/hooks\">Hooks</Link>\r\n      <Link to=\"/antd\">Ant Design</Link>\r\n      <Link to=\"/class-component\">Class Component</Link>\r\n      <Link to=\"/function-component\">Function Component</Link>\r\n    </Styles>\r\n  );\r\n}\r\n\r\nexport default Navigation;","import { HashRouter, Route } from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\nimport Styles from \"./AppStyles\";\nimport \"./assets/css/common.css\";\nimport Home from \"./pages/Home\";\nimport Hooks from \"./pages/Hooks\";\nimport Antd from \"./pages/Antd\";\nimport ClassComponent from \"./pages/ClassComponent\";\nimport FunctionComponent from \"./pages/FunctionComponent\";\nimport Navigation from \"./pages/Navigation\";\n\nfunction App() {\n  return (\n    <Styles>\n      <HashRouter>\n        <Navigation />\n        <Route path=\"/\" exact={true} component={Home} />\n        <Route path=\"/hooks\" component={Hooks} />\n        <Route path=\"/antd\" component={Antd} />\n        <Route path=\"/class-component\" component={ClassComponent} />\n        <Route path=\"/function-component\" component={FunctionComponent} />\n      </HashRouter>\n    </Styles>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}